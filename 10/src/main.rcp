main

#import io
#import mem
#import os
#import array as arr

input := #embed_bin "../input.txt";

struct Pos { x: int, y: int }

max :: fn(a: $t, b: t) -> t { if a > b return a; return b; }
min :: fn(a: $t, b: t) -> t { if a < b return a; return b; }

max_x := 0;
max_y := 0;

find_path :: fn (map: [][]u8, pos: Pos, at: u8, marked: *[]Pos) -> int {
    at := at;
    marked := marked;
    if map[pos.y][pos.x] != at+1 return 0;
    at += 1;
    if at == 9 {
        for m in *marked {
            //if m.x == pos.x && m.y == pos.y return 0;
        }
        arr.add(marked, pos);
        return 1;
    }

    res := 0;
    if pos.x+1 < max_x {
        res += find_path(map, Pos { pos.x+1, pos.y }, at, marked);
    }
    if pos.x-1 >= 0 {
        res += find_path(map, Pos { pos.x-1, pos.y }, at, marked);
    }
    if pos.y+1 < max_y {
        res += find_path(map, Pos { pos.x, pos.y+1 }, at, marked);
    }
    if pos.y-1 >= 0 {
        res += find_path(map, Pos { pos.x, pos.y-1 }, at, marked);
    }

    return res;
}

main :: fn() -> i32 {
	alloc := mem.create_scratch(1024 * 1024 * 1024);
	defer mem.destroy_scratch(&alloc);

    map := arr.create([]u8, &alloc);
    arr.add(&map, arr.create(u8, &alloc));
    zeroes := arr.create(Pos, &alloc);

    y := 0;
    for i := 0; input[i] != 0; i += 1 {
        c := input[i];
        if c == '\r' continue;
        if c == '\n' {
            arr.add(&map, arr.create(u8, &alloc));
            max_x = max(max_x, map[y].count);
            y += 1;
        } else {
            if c != '.'
                arr.add(&map[y], c-@u8'0');
            else 
                arr.add(&map[y], 255);

            if c == '0' {
                arr.add(&zeroes, Pos { map[y].count-1, y });
            }
        }
    }

    max_y = y;

    result := 0;
    marked := arr.create(Pos, &alloc);
    for pos in zeroes {
        result += find_path(map, pos, -1, &marked);
        arr.clear(&marked);
    }

    io.println("Result: %", result);

	return 0;
}

