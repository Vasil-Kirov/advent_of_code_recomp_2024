main

#import io
#import mem
#import math
#import os
#import array as arr

input := #embed_str "../input.txt";

string_to_number :: fn(str: []u32) -> int {
	res := 0;

	for digit in str {
		res += @int (digit - '0');
		res *= 10;
	}

	return res / 10;
}

signs_match :: fn(x0: int, x1: int) -> bool {
	if x0 < 0 return x1 < 0;
	return x1 >= 0;
}

is_diff_in_range :: fn(diff: int) -> bool {
	return math.abs(diff) >= 1 && math.abs(diff) <= 3;
}

is_safe :: fn(report: []int, ignore: int) -> bool {
	os.assert(report.count > 1, "Report must have at least 2 levels");
	safe := true;
	going_down := false;
	going_up := false;
	found_error := false;

	print := ignore == 1;
	for i := 0; i < report.count-1; i += 1 {
		if ignore != i {
			next := i + 1;
			if ignore == next {
				next = i + 2;
			}
			if next != report.count {
				diff := report[next] - report[i];
				if math.abs(diff) != diff going_down = true;
				else going_up = true;
				
				if !is_diff_in_range(diff) || (going_up && going_down) {
				    safe = false;
				    break;
				}
			}
		}
	}
	return safe;
}


main :: fn() -> i32 {
	alloc := mem.create_scratch(1024 * 1024 * 1024);
	defer mem.destroy_scratch(&alloc);

	num_builder := arr.create(u32, &alloc);
	report := arr.create(int, &alloc);
	safe_count := 0;

	for c in input {
		if c == ' ' || c == '\n' {
			num := string_to_number(num_builder);

			arr.add(&report, @int num);
			arr.clear(&num_builder);
			if c == '\n' {
				if is_safe(report, -1) safe_count += 1;
				else {
					for i in report.count {
						if is_safe(report, i) {
							safe_count += 1;
							break;
						}
					}
				}
				arr.clear(&report);
			}
		} else {
			arr.add(&num_builder, c);
		}
	}

	io.println("Safe Count: %", safe_count);


	return 0;
}

