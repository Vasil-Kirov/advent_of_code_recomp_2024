; ModuleID = 'main'
source_filename = "main.rcp"
target datalayout = "e-m:w-p270:32:32-p271:32:32-p272:64:64-i64:64-i128:128-f80:128-n8:16:32:64-S128"
target triple = "x86_64-pc-windows-msvc"

%slice.6 = type { i64, ptr }
%slice.5 = type { i64, ptr }
%slice.4 = type { i64, ptr }
%mem.Allocator = type { ptr, ptr, ptr }
%slice.8 = type { i64, ptr }
%init.Arg = type { i64, ptr }
%string = type { ptr, i64 }

@main.input = global ptr null
@init.INVALID_TYPE = external global i64
@init.type_table = external global %slice.6
@os.STD_INPUT_HANDLE = external global i32
@os.STD_OUTPUT_HANDLE = external global i32
@os.STD_ERROR_HANDLE = external global i32
@os.INVALID_HANDLE_VALUE = external global ptr
@os.CP_UTF7 = external global i32
@os.CP_UTF8 = external global i32
@os.MEM_COMMIT = external global i32
@os.MEM_RESERVE = external global i32
@os.MEM_RELEASE = external global i32
@os.PAGE_NOACCESS = external global i32
@os.PAGE_READONLY = external global i32
@os.PAGE_READWRITE = external global i32
@os.PAGE_WRITECOPY = external global i32
@os.PAGE_EXECUTE = external global i32
@os.PAGE_EXECUTE_READ = external global i32
@os.PAGE_EXECUTE_READWRITE = external global i32
@os.PAGE_EXECUTE_WRITECOPY = external global i32
@os.PAGE_GUARD = external global i32
@os.PAGE_NOCACHE = external global i32
@os.PAGE_WRITECOMBINE = external global i32
@str.CONTINUE_BIT = external global i8
@0 = private unnamed_addr constant [256 x i8] c"###############\0D\0A#.......#....E#\0D\0A#.#.###.#.###.#\0D\0A#.....#.#...#.#\0D\0A#.###.#####.#.#\0D\0A#.#.#.......#.#\0D\0A#.#.#####.###.#\0D\0A#...........#.#\0D\0A###.#.#####.#.#\0D\0A#...#.....#.#.#\0D\0A#.#.#.###.#.#.#\0D\0A#.....#...#.#.#\0D\0A#.###.#.#.#.#.#\0D\0A#S..#.....#...#\0D\0A###############\0D\0A\00", align 1
@1 = private unnamed_addr constant [3 x i8] c"%c\00", align 1
@2 = private unnamed_addr constant [1 x i8] zeroinitializer, align 1

define void @main.__GlobalInitializerFunction.0() {
block_0:
  store ptr @0, ptr @main.input, align 8
  ret void
}

define void @main.get_map(ptr %0, ptr %1, ptr %2, ptr %3) !dbg !79 {
block_0:
  %4 = alloca ptr, align 8
  %5 = alloca ptr, align 8
  %6 = alloca ptr, align 8
  %7 = alloca ptr, align 8
  %8 = alloca ptr, align 8
  %9 = alloca i64, align 8
  %10 = alloca i64, align 8
  %11 = alloca i64, align 8
  %12 = alloca i1, align 1
  %13 = alloca i64, align 8
  %14 = alloca %slice.5, align 8
  %15 = alloca %slice.5, align 8
  %16 = alloca i64, align 8
  %17 = alloca %slice.4, align 8
  %18 = alloca i64, align 8
  %19 = alloca i64, align 8
  %20 = alloca i64, align 8
  %21 = alloca i8, align 1
  %22 = alloca i64, align 8
  store ptr %1, ptr %4, align 8, !dbg !96
  call void @llvm.dbg.value(metadata ptr %4, metadata !97, metadata !DIExpression()), !dbg !96
  store ptr %2, ptr %5, align 8, !dbg !96
  call void @llvm.dbg.value(metadata ptr %5, metadata !98, metadata !DIExpression()), !dbg !96
  store ptr %3, ptr %6, align 8, !dbg !96
  call void @llvm.dbg.value(metadata ptr %6, metadata !99, metadata !DIExpression()), !dbg !96
  %23 = load ptr, ptr %5, align 8, !dbg !100
  store ptr %23, ptr %7, align 8, !dbg !100
  call void @llvm.dbg.declare(metadata ptr %7, metadata !101, metadata !DIExpression()), !dbg !100
  %24 = load ptr, ptr %6, align 8, !dbg !102
  store ptr %24, ptr %8, align 8, !dbg !102
  call void @llvm.dbg.declare(metadata ptr %8, metadata !103, metadata !DIExpression()), !dbg !102
  store i64 0, ptr %9, align 8, !dbg !104
  call void @llvm.dbg.declare(metadata ptr %9, metadata !105, metadata !DIExpression()), !dbg !104
  store i64 0, ptr %10, align 8, !dbg !106
  call void @llvm.dbg.declare(metadata ptr %10, metadata !107, metadata !DIExpression()), !dbg !106
  br label %block_1, !dbg !106

block_1:                                          ; preds = %block_3, %block_0
  %25 = load ptr, ptr @main.input, align 8, !dbg !106
  %26 = load i64, ptr %10, align 8, !dbg !106
  %27 = getelementptr i8, ptr %25, i64 %26, !dbg !106
  %28 = load i8, ptr %27, align 1, !dbg !106
  %29 = icmp ne i8 %28, 0, !dbg !106
  br i1 %29, label %block_2, label %block_4, !dbg !106

block_2:                                          ; preds = %block_1
  %30 = load ptr, ptr @main.input, align 8, !dbg !108
  %31 = load i64, ptr %10, align 8, !dbg !108
  %32 = getelementptr i8, ptr %30, i64 %31, !dbg !108
  %33 = load i8, ptr %32, align 1, !dbg !108
  %34 = zext i8 %33 to i32, !dbg !108
  %35 = icmp eq i32 %34, 13, !dbg !108
  %36 = load ptr, ptr @main.input, align 8, !dbg !108
  %37 = load i64, ptr %10, align 8, !dbg !108
  %38 = getelementptr i8, ptr %36, i64 %37, !dbg !108
  %39 = load i8, ptr %38, align 1, !dbg !108
  %40 = zext i8 %39 to i32, !dbg !108
  %41 = icmp eq i32 %40, 10, !dbg !108
  %42 = icmp ne i1 %35, false, !dbg !108
  %43 = icmp ne i1 %41, false, !dbg !108
  %44 = or i1 %42, %43, !dbg !108
  br i1 %44, label %block_5, label %block_6, !dbg !108

block_5:                                          ; preds = %block_2
  br label %block_4, !dbg !109

block_6:                                          ; preds = %block_2
  br label %block_7, !dbg !109

block_7:                                          ; preds = %block_6
  %45 = load i64, ptr %9, align 8, !dbg !110
  %46 = add i64 %45, 1, !dbg !110
  store i64 %46, ptr %9, align 8, !dbg !110
  br label %block_3, !dbg !110

block_3:                                          ; preds = %block_7
  %47 = load i64, ptr %10, align 8, !dbg !110
  %48 = add i64 %47, 1, !dbg !110
  store i64 %48, ptr %10, align 8, !dbg !110
  %49 = load i64, ptr %10, align 8, !dbg !110
  br label %block_1, !dbg !110

block_4:                                          ; preds = %block_5, %block_1
  store i64 0, ptr %11, align 8, !dbg !111
  call void @llvm.dbg.declare(metadata ptr %11, metadata !112, metadata !DIExpression()), !dbg !111
  store i1 false, ptr %12, align 1, !dbg !113
  call void @llvm.dbg.declare(metadata ptr %12, metadata !114, metadata !DIExpression()), !dbg !113
  store i64 0, ptr %13, align 8, !dbg !116
  call void @llvm.dbg.declare(metadata ptr %13, metadata !117, metadata !DIExpression()), !dbg !116
  br label %block_8, !dbg !116

block_8:                                          ; preds = %block_10, %block_4
  %50 = load ptr, ptr @main.input, align 8, !dbg !116
  %51 = load i64, ptr %13, align 8, !dbg !116
  %52 = getelementptr i8, ptr %50, i64 %51, !dbg !116
  %53 = load i8, ptr %52, align 1, !dbg !116
  %54 = icmp ne i8 %53, 0, !dbg !116
  br i1 %54, label %block_9, label %block_11, !dbg !116

block_9:                                          ; preds = %block_8
  %55 = load ptr, ptr @main.input, align 8, !dbg !118
  %56 = load i64, ptr %13, align 8, !dbg !118
  %57 = getelementptr i8, ptr %55, i64 %56, !dbg !118
  %58 = load i8, ptr %57, align 1, !dbg !118
  %59 = zext i8 %58 to i32, !dbg !118
  %60 = icmp eq i32 %59, 13, !dbg !118
  %61 = load ptr, ptr @main.input, align 8, !dbg !118
  %62 = load i64, ptr %13, align 8, !dbg !118
  %63 = getelementptr i8, ptr %61, i64 %62, !dbg !118
  %64 = load i8, ptr %63, align 1, !dbg !118
  %65 = zext i8 %64 to i32, !dbg !118
  %66 = icmp eq i32 %65, 10, !dbg !118
  %67 = icmp ne i1 %60, false, !dbg !118
  %68 = icmp ne i1 %66, false, !dbg !118
  %69 = or i1 %67, %68, !dbg !118
  br i1 %69, label %block_12, label %block_13, !dbg !118

block_12:                                         ; preds = %block_9
  %70 = load i1, ptr %12, align 1, !dbg !119
  br i1 %70, label %block_15, label %block_16, !dbg !119

block_15:                                         ; preds = %block_12
  %71 = load i64, ptr %11, align 8, !dbg !120
  %72 = add i64 %71, 1, !dbg !120
  store i64 %72, ptr %11, align 8, !dbg !120
  br label %block_17, !dbg !120

block_16:                                         ; preds = %block_12
  br label %block_17, !dbg !120

block_17:                                         ; preds = %block_16, %block_15
  store i1 false, ptr %12, align 1, !dbg !121
  br label %block_14, !dbg !121

block_13:                                         ; preds = %block_9
  store i1 true, ptr %12, align 1, !dbg !122
  br label %block_14, !dbg !122

block_14:                                         ; preds = %block_13, %block_17
  br label %block_10, !dbg !122

block_10:                                         ; preds = %block_14
  %73 = load i64, ptr %13, align 8, !dbg !122
  %74 = add i64 %73, 1, !dbg !122
  store i64 %74, ptr %13, align 8, !dbg !122
  %75 = load i64, ptr %13, align 8, !dbg !122
  br label %block_8, !dbg !122

block_11:                                         ; preds = %block_8
  %76 = load i64, ptr %11, align 8, !dbg !123
  %77 = load ptr, ptr %4, align 8, !dbg !123
  call void @"mem.make_slice:(type,int,*mem.Allocator)->[][]main.Tile"(ptr %14, i64 236, i64 %76, ptr %77), !dbg !123
  call void @llvm.memcpy.p0.p0.i64(ptr align 8 %15, ptr align 8 %14, i64 16, i1 false), !dbg !123
  call void @llvm.dbg.declare(metadata ptr %15, metadata !124, metadata !DIExpression()), !dbg !123
  %78 = load i64, ptr %11, align 8, !dbg !125
  store i64 0, ptr %16, align 8, !dbg !125
  br label %block_18, !dbg !125

block_18:                                         ; preds = %block_20, %block_11
  %79 = load i64, ptr %16, align 8, !dbg !125
  %80 = icmp ult i64 %79, %78, !dbg !125
  br i1 %80, label %block_19, label %block_21, !dbg !125

block_19:                                         ; preds = %block_18
  call void @llvm.dbg.declare(metadata ptr %16, metadata !126, metadata !DIExpression()), !dbg !125
  %81 = load i64, ptr %16, align 8, !dbg !127
  %82 = getelementptr inbounds %slice.5, ptr %15, i32 0, i32 1, !dbg !127
  %83 = load ptr, ptr %82, align 8, !dbg !127
  %84 = getelementptr %slice.4, ptr %83, i64 %81, !dbg !127
  %85 = load i64, ptr %9, align 8, !dbg !127
  %86 = load ptr, ptr %4, align 8, !dbg !127
  call void @"mem.make_slice:(type,int,*mem.Allocator)->[]main.Tile"(ptr %17, i64 229, i64 %85, ptr %86), !dbg !127
  call void @llvm.memcpy.p0.p0.i64(ptr align 8 %84, ptr align 8 %17, i64 16, i1 false), !dbg !127
  br label %block_20, !dbg !127

block_20:                                         ; preds = %block_19
  %87 = load i64, ptr %16, align 8, !dbg !127
  %88 = add i64 %87, 1, !dbg !127
  store i64 %88, ptr %16, align 8, !dbg !127
  br label %block_18, !dbg !127

block_21:                                         ; preds = %block_18
  %89 = load ptr, ptr %7, align 8, !dbg !128
  %90 = load i64, ptr %9, align 8, !dbg !128
  store i64 %90, ptr %89, align 8, !dbg !128
  %91 = load ptr, ptr %8, align 8, !dbg !129
  %92 = load i64, ptr %11, align 8, !dbg !129
  store i64 %92, ptr %91, align 8, !dbg !129
  store i64 0, ptr %18, align 8, !dbg !130
  call void @llvm.dbg.declare(metadata ptr %18, metadata !131, metadata !DIExpression()), !dbg !130
  store i64 0, ptr %19, align 8, !dbg !132
  call void @llvm.dbg.declare(metadata ptr %19, metadata !133, metadata !DIExpression()), !dbg !132
  store i1 false, ptr %12, align 1, !dbg !134
  store i64 0, ptr %20, align 8, !dbg !135
  call void @llvm.dbg.declare(metadata ptr %20, metadata !136, metadata !DIExpression()), !dbg !135
  br label %block_22, !dbg !135

block_22:                                         ; preds = %block_24, %block_21
  %93 = load ptr, ptr @main.input, align 8, !dbg !135
  %94 = load i64, ptr %20, align 8, !dbg !135
  %95 = getelementptr i8, ptr %93, i64 %94, !dbg !135
  %96 = load i8, ptr %95, align 1, !dbg !135
  %97 = icmp ne i8 %96, 0, !dbg !135
  br i1 %97, label %block_23, label %block_25, !dbg !135

block_23:                                         ; preds = %block_22
  %98 = load ptr, ptr @main.input, align 8, !dbg !137
  %99 = load i64, ptr %20, align 8, !dbg !137
  %100 = getelementptr i8, ptr %98, i64 %99, !dbg !137
  %101 = load i8, ptr %100, align 1, !dbg !137
  store i8 %101, ptr %21, align 1, !dbg !137
  call void @llvm.dbg.declare(metadata ptr %21, metadata !138, metadata !DIExpression()), !dbg !137
  %102 = load i8, ptr %21, align 1, !dbg !140
  %103 = zext i8 %102 to i32, !dbg !140
  %104 = icmp eq i32 %103, 13, !dbg !140
  %105 = load i8, ptr %21, align 1, !dbg !140
  %106 = zext i8 %105 to i32, !dbg !140
  %107 = icmp eq i32 %106, 10, !dbg !140
  %108 = icmp ne i1 %104, false, !dbg !140
  %109 = icmp ne i1 %107, false, !dbg !140
  %110 = or i1 %108, %109, !dbg !140
  br i1 %110, label %block_26, label %block_27, !dbg !140

block_26:                                         ; preds = %block_23
  %111 = load i1, ptr %12, align 1, !dbg !141
  br i1 %111, label %block_29, label %block_30, !dbg !141

block_29:                                         ; preds = %block_26
  %112 = load i64, ptr %18, align 8, !dbg !142
  %113 = add i64 %112, 1, !dbg !142
  store i64 %113, ptr %18, align 8, !dbg !142
  store i64 0, ptr %19, align 8, !dbg !143
  br label %block_31, !dbg !143

block_30:                                         ; preds = %block_26
  br label %block_31, !dbg !143

block_31:                                         ; preds = %block_30, %block_29
  store i1 false, ptr %12, align 1, !dbg !144
  br label %block_28, !dbg !144

block_27:                                         ; preds = %block_23
  store i1 true, ptr %12, align 1, !dbg !145
  %114 = load i64, ptr %18, align 8, !dbg !146
  %115 = getelementptr inbounds %slice.5, ptr %15, i32 0, i32 1, !dbg !146
  %116 = load ptr, ptr %115, align 8, !dbg !146
  %117 = getelementptr %slice.4, ptr %116, i64 %114, !dbg !146
  %118 = load i64, ptr %19, align 8, !dbg !146
  %119 = getelementptr inbounds %slice.4, ptr %117, i32 0, i32 1, !dbg !146
  %120 = load ptr, ptr %119, align 8, !dbg !146
  %121 = getelementptr i64, ptr %120, i64 %118, !dbg !146
  %122 = load i8, ptr %21, align 1, !dbg !146
  switch i8 %122, label %block_32 [
    i8 35, label %block_33
    i8 46, label %block_34
    i8 83, label %block_35
    i8 69, label %block_36
  ], !dbg !146

block_33:                                         ; preds = %block_27
  store i64 0, ptr %22, align 8, !dbg !146
  br label %block_32, !dbg !146

block_34:                                         ; preds = %block_27
  store i64 1, ptr %22, align 8, !dbg !146
  br label %block_32, !dbg !146

block_35:                                         ; preds = %block_27
  store i64 2, ptr %22, align 8, !dbg !146
  br label %block_32, !dbg !146

block_36:                                         ; preds = %block_27
  store i64 3, ptr %22, align 8, !dbg !146
  br label %block_32, !dbg !146

block_32:                                         ; preds = %block_36, %block_35, %block_34, %block_33, %block_27
  %123 = load i8, ptr %22, align 1, !dbg !146
  store i8 %123, ptr %121, align 1, !dbg !146
  br label %block_28, !dbg !146

block_28:                                         ; preds = %block_32, %block_31
  br label %block_24, !dbg !146

block_24:                                         ; preds = %block_28
  %124 = load i64, ptr %20, align 8, !dbg !146
  %125 = add i64 %124, 1, !dbg !146
  store i64 %125, ptr %20, align 8, !dbg !146
  %126 = load i64, ptr %20, align 8, !dbg !146
  br label %block_22, !dbg !146

block_25:                                         ; preds = %block_22
  call void @llvm.memcpy.p0.p0.i64(ptr align 8 %0, ptr align 8 %15, i64 16, i1 false), !dbg !147
  ret void, !dbg !147
}

define i32 @main.main() !dbg !148 {
block_0:
  %0 = alloca %mem.Allocator, align 8
  %1 = alloca %mem.Allocator, align 8
  %2 = alloca i64, align 8
  %3 = alloca i64, align 8
  %4 = alloca %slice.5, align 8
  %5 = alloca %slice.5, align 8
  %6 = alloca i64, align 8
  %7 = alloca i64, align 8
  %8 = alloca %slice.8, align 8
  %9 = alloca [1 x %init.Arg], align 8
  %10 = alloca %string, align 8
  %11 = alloca i32, align 4
  %12 = alloca i32, align 4
  %13 = alloca %slice.8, align 8
  %14 = alloca [0 x %init.Arg], align 8
  %15 = alloca %string, align 8
  call void @mem.create_scratch(ptr %0, i64 1073741824), !dbg !152
  call void @llvm.memcpy.p0.p0.i64(ptr align 8 %1, ptr align 8 %0, i64 24, i1 false), !dbg !152
  call void @llvm.dbg.declare(metadata ptr %1, metadata !153, metadata !DIExpression()), !dbg !152
  store i64 0, ptr %2, align 8, !dbg !166
  call void @llvm.dbg.declare(metadata ptr %2, metadata !167, metadata !DIExpression()), !dbg !166
  store i64 0, ptr %3, align 8, !dbg !168
  call void @llvm.dbg.declare(metadata ptr %3, metadata !169, metadata !DIExpression()), !dbg !168
  call void @main.get_map(ptr %4, ptr %1, ptr %2, ptr %3), !dbg !170
  call void @llvm.memcpy.p0.p0.i64(ptr align 8 %5, ptr align 8 %4, i64 16, i1 false), !dbg !170
  call void @llvm.dbg.declare(metadata ptr %5, metadata !171, metadata !DIExpression()), !dbg !170
  store i64 0, ptr %6, align 8, !dbg !172
  call void @llvm.dbg.declare(metadata ptr %6, metadata !173, metadata !DIExpression()), !dbg !172
  br label %block_1, !dbg !172

block_1:                                          ; preds = %block_3, %block_0
  %16 = load i64, ptr %6, align 8, !dbg !172
  %17 = load i64, ptr %3, align 8, !dbg !172
  %18 = icmp slt i64 %16, %17, !dbg !172
  br i1 %18, label %block_2, label %block_4, !dbg !172

block_2:                                          ; preds = %block_1
  store i64 0, ptr %7, align 8, !dbg !174
  call void @llvm.dbg.declare(metadata ptr %7, metadata !175, metadata !DIExpression()), !dbg !174
  br label %block_5, !dbg !174

block_5:                                          ; preds = %block_7, %block_2
  %19 = load i64, ptr %7, align 8, !dbg !174
  %20 = load i64, ptr %2, align 8, !dbg !174
  %21 = icmp slt i64 %19, %20, !dbg !174
  br i1 %21, label %block_6, label %block_8, !dbg !174

block_6:                                          ; preds = %block_5
  %22 = getelementptr inbounds %slice.8, ptr %8, i32 0, i32 0, !dbg !176
  %23 = getelementptr inbounds %slice.8, ptr %8, i32 0, i32 1, !dbg !176
  store i64 1, ptr %22, align 8, !dbg !176
  store ptr %9, ptr %23, align 8, !dbg !176
  %24 = alloca %string, align 8, !dbg !176
  %String = getelementptr inbounds %string, ptr %24, i32 0, i32 0, !dbg !176
  %Size = getelementptr inbounds %string, ptr %24, i32 0, i32 1, !dbg !176
  store ptr @1, ptr %String, align 8, !dbg !176
  store i64 2, ptr %Size, align 8, !dbg !176
  call void @llvm.memcpy.p0.p0.i64(ptr align 8 %10, ptr align 8 %24, i64 16, i1 false), !dbg !176
  %25 = load i64, ptr %6, align 8, !dbg !176
  %26 = getelementptr inbounds %slice.5, ptr %5, i32 0, i32 1, !dbg !176
  %27 = load ptr, ptr %26, align 8, !dbg !176
  %28 = getelementptr %slice.4, ptr %27, i64 %25, !dbg !176
  %29 = load i64, ptr %7, align 8, !dbg !176
  %30 = getelementptr inbounds %slice.4, ptr %28, i32 0, i32 1, !dbg !176
  %31 = load ptr, ptr %30, align 8, !dbg !176
  %32 = getelementptr i64, ptr %31, i64 %29, !dbg !176
  %33 = load i64, ptr %32, align 8, !dbg !176
  switch i64 %33, label %block_9 [
    i64 1, label %block_10
    i64 0, label %block_11
    i64 2, label %block_12
    i64 3, label %block_13
  ], !dbg !176

block_10:                                         ; preds = %block_6
  store i32 46, ptr %11, align 4, !dbg !176
  br label %block_9, !dbg !176

block_11:                                         ; preds = %block_6
  store i32 35, ptr %11, align 4, !dbg !176
  br label %block_9, !dbg !176

block_12:                                         ; preds = %block_6
  store i32 33, ptr %11, align 4, !dbg !176
  br label %block_9, !dbg !176

block_13:                                         ; preds = %block_6
  store i32 48, ptr %11, align 4, !dbg !176
  br label %block_9, !dbg !176

block_9:                                          ; preds = %block_13, %block_12, %block_11, %block_10, %block_6
  %34 = load i64, ptr %11, align 8, !dbg !176
  store i64 %34, ptr %12, align 8, !dbg !176
  %35 = getelementptr [1 x %init.Arg], ptr %9, i64 0, i64 0, !dbg !176
  %36 = getelementptr inbounds %init.Arg, ptr %35, i32 0, i32 0, !dbg !176
  %37 = getelementptr inbounds %init.Arg, ptr %35, i32 0, i32 1, !dbg !176
  store i64 4, ptr %36, align 8, !dbg !176
  store ptr %12, ptr %37, align 8, !dbg !176
  call void @io.print(ptr %10, ptr %8), !dbg !176
  br label %block_7, !dbg !176

block_7:                                          ; preds = %block_9
  %38 = load i64, ptr %7, align 8, !dbg !176
  %39 = add i64 %38, 1, !dbg !176
  store i64 %39, ptr %7, align 8, !dbg !176
  %40 = load i64, ptr %7, align 8, !dbg !176
  br label %block_5, !dbg !176

block_8:                                          ; preds = %block_5
  %41 = getelementptr inbounds %slice.8, ptr %13, i32 0, i32 0, !dbg !177
  %42 = getelementptr inbounds %slice.8, ptr %13, i32 0, i32 1, !dbg !177
  store i64 0, ptr %41, align 8, !dbg !177
  store ptr %14, ptr %42, align 8, !dbg !177
  %43 = alloca %string, align 8, !dbg !177
  %String1 = getelementptr inbounds %string, ptr %43, i32 0, i32 0, !dbg !177
  %Size2 = getelementptr inbounds %string, ptr %43, i32 0, i32 1, !dbg !177
  store ptr @2, ptr %String1, align 8, !dbg !177
  store i64 0, ptr %Size2, align 8, !dbg !177
  call void @llvm.memcpy.p0.p0.i64(ptr align 8 %15, ptr align 8 %43, i64 16, i1 false), !dbg !177
  call void @io.println(ptr %15, ptr %13), !dbg !177
  br label %block_3, !dbg !177

block_3:                                          ; preds = %block_8
  %44 = load i64, ptr %6, align 8, !dbg !177
  %45 = add i64 %44, 1, !dbg !177
  store i64 %45, ptr %6, align 8, !dbg !177
  %46 = load i64, ptr %6, align 8, !dbg !177
  br label %block_1, !dbg !177

block_4:                                          ; preds = %block_1
  call void @mem.destroy_scratch(ptr %1), !dbg !178
  ret i32 0, !dbg !178
}

declare void @init.global_initializers()

declare i64 @init.get_struct_alignment(i64)

declare i64 @init.get_type_alignment(i64)

declare i64 @init.get_basic_type_size(ptr)

declare i64 @init.get_struct_size(i64)

declare i64 @init.get_type_size(i64)

declare i64 @init.get_struct_member_offset(ptr, i64)

declare i32 @main.main.1()

declare i32 @main()

declare void @os.assert(i1, ptr)

declare i1 @WriteFile(ptr, ptr, i32, ptr, ptr)

declare ptr @GetStdHandle(i32)

declare void @ExitProcess(i32)

declare i32 @SetConsoleOutputCP(i32)

declare ptr @VirtualAlloc(ptr, i64, i32, i32)

declare i1 @VirtualFree(ptr, i64, i32)

declare i1 @ReadConsoleA(ptr, ptr, i32, ptr, ptr)

declare void @os.abort()

declare void @os.print(ptr, i32)

declare ptr @os.alloc(i64)

declare void @os.free(ptr)

declare i32 @os.read_stdin_line(ptr, i32)

declare void @io.push_string(ptr, ptr)

declare void @io.format_uint(ptr, i64)

declare void @io.format_int(ptr, i64)

declare void @io.print_typetype(ptr, ptr)

declare void @io.print_type(ptr, ptr)

declare void @io.builder_to_string(ptr, ptr)

declare void @io.print_type_with_formatter(ptr, i32, ptr)

declare void @io.__internal_print(ptr, ptr, ptr)

declare void @io.vsprint(ptr, ptr, ptr)

declare void @io.sprint(ptr, ptr, ptr)

declare void @io.print(ptr, ptr)

declare void @io.println(ptr, ptr)

declare void @io.readln(ptr, ptr, i32)

declare i32 @io.get_next(ptr)

declare void @"io.format_float:(type,*[]u32,f32,i32)->void"(i64, ptr, float, i32)

declare void @"io.format_float:(type,*[]u32,f64,i32)->void"(i64, ptr, double, i32)

declare ptr @mem.generic_alloc(i64, ptr)

declare void @mem.generic_free(ptr, ptr)

declare void @mem.create_generic_allocator(ptr)

declare ptr @mem.arena_alloc(i64, ptr)

declare void @mem.no_free(ptr, ptr)

declare void @mem.create_scratch(ptr, i64)

declare void @mem.destroy_scratch(ptr)

declare ptr @memcpy(ptr, ptr, i64)

declare ptr @memset(ptr, i32, i64)

declare void @"mem.make_slice:(type,int,*mem.Allocator)->[][]main.Tile"(ptr, i64, i64, ptr)

declare void @"mem.make_slice:(type,int,*mem.Allocator)->[]main.Tile"(ptr, i64, i64, ptr)

declare void @"mem.make_slice:(type,int,*mem.Allocator)->[]u8"(ptr, i64, i64, ptr)

declare i64 @str.to_int(ptr)

declare void @str.create(ptr, ptr)

declare void @str.append(ptr, ptr)

declare void @str.append_u32(ptr, i32)

declare void @str.append_u8(ptr, i8)

declare void @str.from_builder(ptr, ptr, ptr)

declare void @str.substr(ptr, ptr, i64, i64)

declare i64 @str.get_codepoint_size(ptr)

declare ptr @str.advance(ptr)

declare ptr @str._it_advance(ptr, i64, i64)

declare i32 @str.deref(ptr)

declare i32 @str.index(ptr, i64)

declare void @"array.add:(*[]u32,u32)->void"(ptr, i32)

declare void @"array.create:(type,*mem.Allocator)->[]u8"(ptr, i64, ptr)

declare void @"array.add:(*[]u8,u8)->void"(ptr, i8)

declare void @"array.create:(type,*mem.Allocator)->[]u32"(ptr, i64, ptr)

declare void @"array.free:(*[]u32)->void"(ptr)

declare void @"array.free:(*[]u8)->void"(ptr)

; Function Attrs: nocallback nofree nosync nounwind speculatable willreturn memory(none)
declare void @llvm.dbg.value(metadata, metadata, metadata) #0

; Function Attrs: nocallback nofree nosync nounwind speculatable willreturn memory(none)
declare void @llvm.dbg.declare(metadata, metadata, metadata) #0

; Function Attrs: nocallback nofree nounwind willreturn memory(argmem: readwrite)
declare void @llvm.memcpy.p0.p0.i64(ptr noalias nocapture writeonly, ptr noalias nocapture readonly, i64, i1 immarg) #1

attributes #0 = { nocallback nofree nosync nounwind speculatable willreturn memory(none) }
attributes #1 = { nocallback nofree nounwind willreturn memory(argmem: readwrite) }

!llvm.dbg.cu = !{!0}
!llvm.module.flags = !{!77, !78}

!0 = distinct !DICompileUnit(language: DW_LANG_C99, file: !1, producer: "RCP Compiler", isOptimized: false, runtimeVersion: 0, emissionKind: FullDebug, enums: !2, splitDebugInlining: false)
!1 = !DIFile(filename: "main.rcp", directory: "E:\\Non_C_Projects\\advent_of_code_recomp_2024\\16\\src")
!2 = !{!3, !15, !36, !45, !50, !54, !65, !71}
!3 = !DICompositeType(tag: DW_TAG_enumeration_type, name: "init.TypeKind", scope: !1, file: !1, size: 64, align: 64, elements: !4)
!4 = !{!5, !6, !7, !8, !9, !10, !11, !12, !13, !14}
!5 = !DIEnumerator(name: "Invalid", value: 0, isUnsigned: true)
!6 = !DIEnumerator(name: "Basic", value: 1, isUnsigned: true)
!7 = !DIEnumerator(name: "Function", value: 2, isUnsigned: true)
!8 = !DIEnumerator(name: "Struct", value: 3, isUnsigned: true)
!9 = !DIEnumerator(name: "Pointer", value: 4, isUnsigned: true)
!10 = !DIEnumerator(name: "Array", value: 5, isUnsigned: true)
!11 = !DIEnumerator(name: "Slice", value: 6, isUnsigned: true)
!12 = !DIEnumerator(name: "Vector", value: 7, isUnsigned: true)
!13 = !DIEnumerator(name: "Enum", value: 8, isUnsigned: true)
!14 = !DIEnumerator(name: "Generic", value: 9, isUnsigned: true)
!15 = !DICompositeType(tag: DW_TAG_enumeration_type, name: "init.BasicKind", scope: !1, file: !1, size: 64, align: 64, elements: !16)
!16 = !{!17, !18, !19, !20, !21, !22, !23, !24, !25, !26, !27, !28, !29, !30, !31, !32, !33, !34, !35}
!17 = !DIEnumerator(name: "Bool", value: 0, isUnsigned: true)
!18 = !DIEnumerator(name: "String", value: 1, isUnsigned: true)
!19 = !DIEnumerator(name: "U8", value: 2, isUnsigned: true)
!20 = !DIEnumerator(name: "U16", value: 3, isUnsigned: true)
!21 = !DIEnumerator(name: "U32", value: 4, isUnsigned: true)
!22 = !DIEnumerator(name: "U64", value: 5, isUnsigned: true)
!23 = !DIEnumerator(name: "I8", value: 6, isUnsigned: true)
!24 = !DIEnumerator(name: "I16", value: 7, isUnsigned: true)
!25 = !DIEnumerator(name: "I32", value: 8, isUnsigned: true)
!26 = !DIEnumerator(name: "I64", value: 9, isUnsigned: true)
!27 = !DIEnumerator(name: "F32", value: 10, isUnsigned: true)
!28 = !DIEnumerator(name: "F64", value: 11, isUnsigned: true)
!29 = !DIEnumerator(name: "untypedInteger", value: 12, isUnsigned: true)
!30 = !DIEnumerator(name: "untypedFloat", value: 13, isUnsigned: true)
!31 = !DIEnumerator(name: "Int", value: 14, isUnsigned: true)
!32 = !DIEnumerator(name: "Uint", value: 15, isUnsigned: true)
!33 = !DIEnumerator(name: "Type", value: 16, isUnsigned: true)
!34 = !DIEnumerator(name: "Auto", value: 17, isUnsigned: true)
!35 = !DIEnumerator(name: "Module", value: 18, isUnsigned: true)
!36 = !DICompositeType(tag: DW_TAG_enumeration_type, name: "init.BasicFlag", scope: !1, file: !1, size: 32, align: 32, elements: !37)
!37 = !{!38, !39, !40, !41, !42, !43, !44}
!38 = !DIEnumerator(name: "Boolean", value: 1, isUnsigned: true)
!39 = !DIEnumerator(name: "Integer", value: 2, isUnsigned: true)
!40 = !DIEnumerator(name: "Float", value: 4, isUnsigned: true)
!41 = !DIEnumerator(name: "String", value: 8, isUnsigned: true)
!42 = !DIEnumerator(name: "Untyped", value: 32, isUnsigned: true)
!43 = !DIEnumerator(name: "Unsigned", value: 64, isUnsigned: true)
!44 = !DIEnumerator(name: "TypeID", value: 128, isUnsigned: true)
!45 = !DICompositeType(tag: DW_TAG_enumeration_type, name: "init.StructFlag", scope: !1, file: !1, size: 32, align: 32, elements: !46)
!46 = !{!47, !48, !49}
!47 = !DIEnumerator(name: "Packed", value: 1, isUnsigned: true)
!48 = !DIEnumerator(name: "Generic", value: 2, isUnsigned: true)
!49 = !DIEnumerator(name: "Union", value: 4, isUnsigned: true)
!50 = !DICompositeType(tag: DW_TAG_enumeration_type, name: "init.VectorKind", scope: !1, file: !1, size: 64, align: 64, elements: !51)
!51 = !{!52, !53}
!52 = !DIEnumerator(name: "Float", value: 0, isUnsigned: true)
!53 = !DIEnumerator(name: "Int", value: 1, isUnsigned: true)
!54 = !DICompositeType(tag: DW_TAG_enumeration_type, name: "compile.CompileFlag", scope: !1, file: !1, size: 32, align: 32, elements: !55)
!55 = !{!56, !57, !58, !59, !60, !61, !62, !63, !64}
!56 = !DIEnumerator(name: "Debug", value: 1, isUnsigned: true)
!57 = !DIEnumerator(name: "SanAddress", value: 2, isUnsigned: true)
!58 = !DIEnumerator(name: "SanMemory", value: 4, isUnsigned: true)
!59 = !DIEnumerator(name: "SanThread", value: 8, isUnsigned: true)
!60 = !DIEnumerator(name: "SanUndefined", value: 16, isUnsigned: true)
!61 = !DIEnumerator(name: "NoStdLib", value: 32, isUnsigned: true)
!62 = !DIEnumerator(name: "SharedLib", value: 64, isUnsigned: true)
!63 = !DIEnumerator(name: "CrossAndroid", value: 128, isUnsigned: true)
!64 = !DIEnumerator(name: "NoLink", value: 256, isUnsigned: true)
!65 = !DICompositeType(tag: DW_TAG_enumeration_type, name: "compile.Arch", scope: !1, file: !1, size: 32, align: 32, elements: !66)
!66 = !{!67, !68, !69, !70}
!67 = !DIEnumerator(name: "x86_64", value: 0, isUnsigned: true)
!68 = !DIEnumerator(name: "x86", value: 1, isUnsigned: true)
!69 = !DIEnumerator(name: "Arm32", value: 2, isUnsigned: true)
!70 = !DIEnumerator(name: "Arm64", value: 4, isUnsigned: true)
!71 = !DICompositeType(tag: DW_TAG_enumeration_type, name: "main.Tile", scope: !1, file: !1, size: 64, align: 64, elements: !72)
!72 = !{!73, !74, !75, !76}
!73 = !DIEnumerator(name: "Wall", value: 0, isUnsigned: true)
!74 = !DIEnumerator(name: "Empty", value: 1, isUnsigned: true)
!75 = !DIEnumerator(name: "Start", value: 2, isUnsigned: true)
!76 = !DIEnumerator(name: "End", value: 3, isUnsigned: true)
!77 = !{i32 2, !"CodeView", i32 1}
!78 = !{i32 2, !"Debug Info Version", i32 3}
!79 = distinct !DISubprogram(name: "get_map", linkageName: "main.get_map", scope: !1, file: !1, line: 17, type: !80, spFlags: DISPFlagDefinition, unit: !0, retainedNodes: !95)
!80 = !DISubroutineType(types: !81)
!81 = !{!82, !92, !94, !94}
!82 = !DICompositeType(tag: DW_TAG_structure_type, scope: !1, file: !1, size: 128, align: 64, elements: !83)
!83 = !{!84, !86}
!84 = !DIDerivedType(tag: DW_TAG_member, name: "count", scope: !1, file: !1, baseType: !85, size: 64, align: 64)
!85 = !DIBasicType(name: "int", size: 64, encoding: DW_ATE_signed)
!86 = !DIDerivedType(tag: DW_TAG_member, name: "data", scope: !1, file: !1, baseType: !87, size: 64, align: 64, offset: 64)
!87 = !DIDerivedType(tag: DW_TAG_pointer_type, name: "*[]main.Tile", baseType: !88, size: 64, align: 64, dwarfAddressSpace: 0)
!88 = !DICompositeType(tag: DW_TAG_structure_type, scope: !1, file: !1, size: 128, align: 64, elements: !89)
!89 = !{!84, !90}
!90 = !DIDerivedType(tag: DW_TAG_member, name: "data", scope: !1, file: !1, baseType: !91, size: 64, align: 64, offset: 64)
!91 = !DIDerivedType(tag: DW_TAG_pointer_type, name: "*main.Tile", baseType: !71, size: 64, align: 64, dwarfAddressSpace: 0)
!92 = !DIDerivedType(tag: DW_TAG_pointer_type, name: "*mem.Allocator", baseType: !93, size: 64, align: 64, dwarfAddressSpace: 0)
!93 = !DICompositeType(tag: DW_TAG_structure_type, name: "mem.Allocator", scope: !1, file: !1, size: 192, align: 64, flags: DIFlagFwdDecl)
!94 = !DIDerivedType(tag: DW_TAG_pointer_type, name: "*int", baseType: !85, size: 64, align: 64, dwarfAddressSpace: 0)
!95 = !{}
!96 = !DILocation(line: 17, scope: !79)
!97 = !DILocalVariable(name: "alloc", scope: !79, file: !1, line: 17, type: !92)
!98 = !DILocalVariable(name: "o_w", arg: 1, scope: !79, file: !1, line: 17, type: !94)
!99 = !DILocalVariable(name: "o_h", arg: 2, scope: !79, file: !1, line: 17, type: !94)
!100 = !DILocation(line: 18, scope: !79)
!101 = !DILocalVariable(name: "o_w", scope: !79, file: !1, line: 18, type: !94)
!102 = !DILocation(line: 19, scope: !79)
!103 = !DILocalVariable(name: "o_h", scope: !79, file: !1, line: 19, type: !94)
!104 = !DILocation(line: 20, scope: !79)
!105 = !DILocalVariable(name: "width", scope: !79, file: !1, line: 20, type: !85)
!106 = !DILocation(line: 21, scope: !79)
!107 = !DILocalVariable(name: "i", scope: !79, file: !1, line: 21, type: !85)
!108 = !DILocation(line: 22, scope: !79)
!109 = !DILocation(line: 23, scope: !79)
!110 = !DILocation(line: 24, scope: !79)
!111 = !DILocation(line: 26, scope: !79)
!112 = !DILocalVariable(name: "height", scope: !79, file: !1, line: 26, type: !85)
!113 = !DILocation(line: 27, scope: !79)
!114 = !DILocalVariable(name: "not_empty", scope: !79, file: !1, line: 27, type: !115)
!115 = !DIBasicType(name: "bool", size: 8, encoding: DW_ATE_boolean)
!116 = !DILocation(line: 28, scope: !79)
!117 = !DILocalVariable(name: "i", scope: !79, file: !1, line: 28, type: !85)
!118 = !DILocation(line: 29, scope: !79)
!119 = !DILocation(line: 30, scope: !79)
!120 = !DILocation(line: 31, scope: !79)
!121 = !DILocation(line: 32, scope: !79)
!122 = !DILocation(line: 35, scope: !79)
!123 = !DILocation(line: 39, scope: !79)
!124 = !DILocalVariable(name: "map", scope: !79, file: !1, line: 39, type: !82)
!125 = !DILocation(line: 40, scope: !79)
!126 = !DILocalVariable(name: "i", scope: !79, file: !1, line: 40, type: !85)
!127 = !DILocation(line: 41, scope: !79)
!128 = !DILocation(line: 44, scope: !79)
!129 = !DILocation(line: 45, scope: !79)
!130 = !DILocation(line: 47, scope: !79)
!131 = !DILocalVariable(name: "y", scope: !79, file: !1, line: 47, type: !85)
!132 = !DILocation(line: 48, scope: !79)
!133 = !DILocalVariable(name: "x", scope: !79, file: !1, line: 48, type: !85)
!134 = !DILocation(line: 49, scope: !79)
!135 = !DILocation(line: 50, scope: !79)
!136 = !DILocalVariable(name: "i", scope: !79, file: !1, line: 50, type: !85)
!137 = !DILocation(line: 51, scope: !79)
!138 = !DILocalVariable(name: "c", scope: !79, file: !1, line: 51, type: !139)
!139 = !DIBasicType(name: "u8", size: 8, encoding: DW_ATE_unsigned)
!140 = !DILocation(line: 52, scope: !79)
!141 = !DILocation(line: 53, scope: !79)
!142 = !DILocation(line: 54, scope: !79)
!143 = !DILocation(line: 55, scope: !79)
!144 = !DILocation(line: 57, scope: !79)
!145 = !DILocation(line: 60, scope: !79)
!146 = !DILocation(line: 61, scope: !79)
!147 = !DILocation(line: 70, scope: !79)
!148 = distinct !DISubprogram(name: "main", linkageName: "main.main", scope: !1, file: !1, line: 73, type: !149, spFlags: DISPFlagDefinition, unit: !0, retainedNodes: !95)
!149 = !DISubroutineType(types: !150)
!150 = !{!151}
!151 = !DIBasicType(name: "i32", size: 32, encoding: DW_ATE_signed)
!152 = !DILocation(line: 74, scope: !148)
!153 = !DILocalVariable(name: "alloc", scope: !148, file: !1, line: 74, type: !154)
!154 = !DICompositeType(tag: DW_TAG_structure_type, name: "mem.Allocator", scope: !1, file: !1, size: 192, elements: !155)
!155 = !{!156, !161, !165}
!156 = !DIDerivedType(tag: DW_TAG_member, name: "alloc", scope: !1, file: !1, baseType: !157, size: 64, align: 64)
!157 = !DIDerivedType(tag: DW_TAG_pointer_type, name: "*fn(int, *mem.Allocator) -> ?*", baseType: !158, size: 64, align: 64, dwarfAddressSpace: 0)
!158 = !DISubroutineType(types: !159)
!159 = !{!160, !85, !92}
!160 = !DIDerivedType(tag: DW_TAG_pointer_type, name: "*void", baseType: null, size: 64, align: 64, dwarfAddressSpace: 0)
!161 = !DIDerivedType(tag: DW_TAG_member, name: "free", scope: !1, file: !1, baseType: !162, size: 64, align: 64, offset: 64)
!162 = !DIDerivedType(tag: DW_TAG_pointer_type, name: "*fn(*, *mem.Allocator)", baseType: !163, size: 64, align: 64, dwarfAddressSpace: 0)
!163 = !DISubroutineType(types: !164)
!164 = !{null, !160, !92}
!165 = !DIDerivedType(tag: DW_TAG_member, name: "data", scope: !1, file: !1, baseType: !160, size: 64, align: 64, offset: 128)
!166 = !DILocation(line: 77, scope: !148)
!167 = !DILocalVariable(name: "width", scope: !148, file: !1, line: 77, type: !85)
!168 = !DILocation(line: 78, scope: !148)
!169 = !DILocalVariable(name: "height", scope: !148, file: !1, line: 78, type: !85)
!170 = !DILocation(line: 79, scope: !148)
!171 = !DILocalVariable(name: "map", scope: !148, file: !1, line: 79, type: !82)
!172 = !DILocation(line: 81, scope: !148)
!173 = !DILocalVariable(name: "y", scope: !148, file: !1, line: 81, type: !85)
!174 = !DILocation(line: 82, scope: !148)
!175 = !DILocalVariable(name: "x", scope: !148, file: !1, line: 82, type: !85)
!176 = !DILocation(line: 83, scope: !148)
!177 = !DILocation(line: 90, scope: !148)
!178 = !DILocation(line: 75, scope: !148)
