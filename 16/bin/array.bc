; ModuleID = 'array'
source_filename = "array.rcp"
target datalayout = "e-m:w-p270:32:32-p271:32:32-p272:64:64-i64:64-i128:128-f80:128-n8:16:32:64-S128"
target triple = "x86_64-pc-windows-msvc"

%slice.6 = type { i64, ptr }
%slice.3 = type { i64, ptr }
%array.Header = type { i64, %mem.Allocator }
%mem.Allocator = type { ptr, ptr, ptr }
%slice.7 = type { i64, ptr }

@main.input = external global ptr
@init.INVALID_TYPE = external global i64
@init.type_table = external global %slice.6
@os.STD_INPUT_HANDLE = external global i32
@os.STD_OUTPUT_HANDLE = external global i32
@os.STD_ERROR_HANDLE = external global i32
@os.INVALID_HANDLE_VALUE = external global ptr
@os.CP_UTF7 = external global i32
@os.CP_UTF8 = external global i32
@os.MEM_COMMIT = external global i32
@os.MEM_RESERVE = external global i32
@os.MEM_RELEASE = external global i32
@os.PAGE_NOACCESS = external global i32
@os.PAGE_READONLY = external global i32
@os.PAGE_READWRITE = external global i32
@os.PAGE_WRITECOPY = external global i32
@os.PAGE_EXECUTE = external global i32
@os.PAGE_EXECUTE_READ = external global i32
@os.PAGE_EXECUTE_READWRITE = external global i32
@os.PAGE_EXECUTE_WRITECOPY = external global i32
@os.PAGE_GUARD = external global i32
@os.PAGE_NOCACHE = external global i32
@os.PAGE_WRITECOMBINE = external global i32
@str.CONTINUE_BIT = external global i8

define void @array.__GlobalInitializerFunction.0() {
block_0:
  ret void
}

declare void @main.get_map(ptr, ptr, ptr, ptr)

declare i32 @main.main()

declare void @init.global_initializers()

declare i64 @init.get_struct_alignment(i64)

declare i64 @init.get_type_alignment(i64)

declare i64 @init.get_basic_type_size(ptr)

declare i64 @init.get_struct_size(i64)

declare i64 @init.get_type_size(i64)

declare i64 @init.get_struct_member_offset(ptr, i64)

declare i32 @main.main.1()

declare i32 @main()

declare void @os.assert(i1, ptr)

declare i1 @WriteFile(ptr, ptr, i32, ptr, ptr)

declare ptr @GetStdHandle(i32)

declare void @ExitProcess(i32)

declare i32 @SetConsoleOutputCP(i32)

declare ptr @VirtualAlloc(ptr, i64, i32, i32)

declare i1 @VirtualFree(ptr, i64, i32)

declare i1 @ReadConsoleA(ptr, ptr, i32, ptr, ptr)

declare void @os.abort()

declare void @os.print(ptr, i32)

declare ptr @os.alloc(i64)

declare void @os.free(ptr)

declare i32 @os.read_stdin_line(ptr, i32)

declare void @io.push_string(ptr, ptr)

declare void @io.format_uint(ptr, i64)

declare void @io.format_int(ptr, i64)

declare void @io.print_typetype(ptr, ptr)

declare void @io.print_type(ptr, ptr)

declare void @io.builder_to_string(ptr, ptr)

declare void @io.print_type_with_formatter(ptr, i32, ptr)

declare void @io.__internal_print(ptr, ptr, ptr)

declare void @io.vsprint(ptr, ptr, ptr)

declare void @io.sprint(ptr, ptr, ptr)

declare void @io.print(ptr, ptr)

declare void @io.println(ptr, ptr)

declare void @io.readln(ptr, ptr, i32)

declare i32 @io.get_next(ptr)

declare void @"io.format_float:(type,*[]u32,f32,i32)->void"(i64, ptr, float, i32)

declare void @"io.format_float:(type,*[]u32,f64,i32)->void"(i64, ptr, double, i32)

declare ptr @mem.generic_alloc(i64, ptr)

declare void @mem.generic_free(ptr, ptr)

declare void @mem.create_generic_allocator(ptr)

declare ptr @mem.arena_alloc(i64, ptr)

declare void @mem.no_free(ptr, ptr)

declare void @mem.create_scratch(ptr, i64)

declare void @mem.destroy_scratch(ptr)

declare ptr @memcpy(ptr, ptr, i64)

declare ptr @memset(ptr, i32, i64)

declare void @"mem.make_slice:(type,int,*mem.Allocator)->[][]main.Tile"(ptr, i64, i64, ptr)

declare void @"mem.make_slice:(type,int,*mem.Allocator)->[]main.Tile"(ptr, i64, i64, ptr)

declare void @"mem.make_slice:(type,int,*mem.Allocator)->[]u8"(ptr, i64, i64, ptr)

declare i64 @str.to_int(ptr)

declare void @str.create(ptr, ptr)

declare void @str.append(ptr, ptr)

declare void @str.append_u32(ptr, i32)

declare void @str.append_u8(ptr, i8)

declare void @str.from_builder(ptr, ptr, ptr)

declare void @str.substr(ptr, ptr, i64, i64)

declare i64 @str.get_codepoint_size(ptr)

declare ptr @str.advance(ptr)

declare ptr @str._it_advance(ptr, i64, i64)

declare i32 @str.deref(ptr)

declare i32 @str.index(ptr, i64)

define void @"array.add:(*[]u32,u32)->void"(ptr %0, i32 %1) !dbg !79 {
block_0:
  %2 = alloca ptr, align 8
  %3 = alloca i32, align 4
  %4 = alloca ptr, align 8
  %5 = alloca ptr, align 8
  %6 = alloca i64, align 8
  %7 = alloca ptr, align 8
  %8 = alloca ptr, align 8
  store ptr %0, ptr %2, align 8, !dbg !91
  call void @llvm.dbg.value(metadata ptr %2, metadata !92, metadata !DIExpression()), !dbg !91
  store i32 %1, ptr %3, align 4, !dbg !91
  call void @llvm.dbg.value(metadata ptr %3, metadata !93, metadata !DIExpression()), !dbg !91
  %9 = load ptr, ptr %2, align 8, !dbg !94
  store ptr %9, ptr %4, align 8, !dbg !94
  call void @llvm.dbg.declare(metadata ptr %4, metadata !95, metadata !DIExpression()), !dbg !94
  %10 = load ptr, ptr %4, align 8, !dbg !96
  %11 = getelementptr inbounds %slice.3, ptr %10, i32 0, i32 1, !dbg !96
  %12 = load ptr, ptr %11, align 8, !dbg !96
  %13 = getelementptr %array.Header, ptr %12, i64 -1, !dbg !96
  store ptr %13, ptr %5, align 8, !dbg !96
  call void @llvm.dbg.declare(metadata ptr %5, metadata !97, metadata !DIExpression()), !dbg !96
  %14 = load ptr, ptr %4, align 8, !dbg !117
  %15 = getelementptr inbounds %slice.3, ptr %14, i32 0, i32 0, !dbg !117
  %16 = load i64, ptr %15, align 8, !dbg !117
  %17 = load ptr, ptr %5, align 8, !dbg !117
  %18 = getelementptr inbounds %array.Header, ptr %17, i32 0, i32 0, !dbg !117
  %19 = load i64, ptr %18, align 8, !dbg !117
  %20 = icmp sge i64 %16, %19, !dbg !117
  br i1 %20, label %block_1, label %block_2, !dbg !117

block_1:                                          ; preds = %block_0
  %21 = load ptr, ptr %5, align 8, !dbg !118
  %22 = getelementptr inbounds %array.Header, ptr %21, i32 0, i32 0, !dbg !118
  %23 = load i64, ptr %22, align 8, !dbg !118
  %24 = mul i64 %23, 2, !dbg !118
  store i64 %24, ptr %6, align 8, !dbg !118
  call void @llvm.dbg.declare(metadata ptr %6, metadata !119, metadata !DIExpression()), !dbg !118
  %25 = load ptr, ptr %5, align 8, !dbg !120
  %26 = getelementptr inbounds %array.Header, ptr %25, i32 0, i32 1, !dbg !120
  %27 = getelementptr inbounds %mem.Allocator, ptr %26, i32 0, i32 0, !dbg !120
  %28 = load ptr, ptr %27, align 8, !dbg !120
  %29 = load i64, ptr %6, align 8, !dbg !120
  %30 = mul i64 %29, 4, !dbg !120
  %31 = add i64 %30, 32, !dbg !120
  %32 = load ptr, ptr %5, align 8, !dbg !120
  %33 = getelementptr inbounds %array.Header, ptr %32, i32 0, i32 1, !dbg !120
  %34 = call ptr %28(i64 %31, ptr %33), !dbg !120
  store ptr %34, ptr %7, align 8, !dbg !120
  call void @llvm.dbg.declare(metadata ptr %7, metadata !121, metadata !DIExpression()), !dbg !120
  %35 = load ptr, ptr %7, align 8, !dbg !123
  %36 = icmp ne ptr %35, null, !dbg !123
  %37 = icmp eq i1 %36, false, !dbg !123
  br i1 %37, label %block_4, label %block_5, !dbg !123

block_4:                                          ; preds = %block_1
  %38 = load ptr, ptr %4, align 8, !dbg !124
  %39 = getelementptr inbounds %slice.3, ptr %38, i32 0, i32 1, !dbg !124
  store ptr null, ptr %39, align 8, !dbg !124
  %40 = load ptr, ptr %4, align 8, !dbg !125
  %41 = getelementptr inbounds %slice.3, ptr %40, i32 0, i32 0, !dbg !125
  store i64 0, ptr %41, align 8, !dbg !125
  ret void, !dbg !126

block_5:                                          ; preds = %block_1
  br label %block_6, !dbg !126

block_6:                                          ; preds = %block_5
  %42 = load ptr, ptr %7, align 8, !dbg !127
  store ptr %42, ptr %8, align 8, !dbg !127
  call void @llvm.dbg.declare(metadata ptr %8, metadata !128, metadata !DIExpression()), !dbg !127
  %43 = load ptr, ptr %8, align 8, !dbg !129
  %44 = getelementptr inbounds %array.Header, ptr %43, i32 0, i32 0, !dbg !129
  %45 = load i64, ptr %6, align 8, !dbg !129
  store i64 %45, ptr %44, align 8, !dbg !129
  %46 = load ptr, ptr %8, align 8, !dbg !130
  %47 = getelementptr inbounds %array.Header, ptr %46, i32 0, i32 1, !dbg !130
  %48 = load ptr, ptr %5, align 8, !dbg !130
  %49 = getelementptr inbounds %array.Header, ptr %48, i32 0, i32 1, !dbg !130
  call void @llvm.memcpy.p0.p0.i64(ptr align 8 %47, ptr align 8 %49, i64 24, i1 false), !dbg !130
  %50 = load ptr, ptr %8, align 8, !dbg !131
  %51 = getelementptr %array.Header, ptr %50, i64 1, !dbg !131
  %52 = load ptr, ptr %4, align 8, !dbg !131
  %53 = getelementptr inbounds %slice.3, ptr %52, i32 0, i32 1, !dbg !131
  %54 = load ptr, ptr %53, align 8, !dbg !131
  %55 = load ptr, ptr %4, align 8, !dbg !131
  %56 = getelementptr inbounds %slice.3, ptr %55, i32 0, i32 0, !dbg !131
  %57 = load i64, ptr %56, align 8, !dbg !131
  %58 = mul i64 %57, 4, !dbg !131
  %59 = call ptr @memcpy(ptr %51, ptr %54, i64 %58), !dbg !131
  %60 = load ptr, ptr %8, align 8, !dbg !132
  %61 = getelementptr inbounds %array.Header, ptr %60, i32 0, i32 1, !dbg !132
  %62 = getelementptr inbounds %mem.Allocator, ptr %61, i32 0, i32 1, !dbg !132
  %63 = load ptr, ptr %62, align 8, !dbg !132
  %64 = load ptr, ptr %5, align 8, !dbg !132
  %65 = load ptr, ptr %8, align 8, !dbg !132
  %66 = getelementptr inbounds %array.Header, ptr %65, i32 0, i32 1, !dbg !132
  call void %63(ptr %64, ptr %66), !dbg !132
  %67 = load ptr, ptr %4, align 8, !dbg !133
  %68 = getelementptr inbounds %slice.3, ptr %67, i32 0, i32 1, !dbg !133
  %69 = load ptr, ptr %8, align 8, !dbg !133
  %70 = getelementptr %array.Header, ptr %69, i64 1, !dbg !133
  store ptr %70, ptr %68, align 8, !dbg !133
  br label %block_3, !dbg !133

block_2:                                          ; preds = %block_0
  br label %block_3, !dbg !133

block_3:                                          ; preds = %block_2, %block_6
  %71 = load ptr, ptr %4, align 8, !dbg !134
  %72 = load ptr, ptr %4, align 8, !dbg !134
  %73 = getelementptr inbounds %slice.3, ptr %72, i32 0, i32 0, !dbg !134
  %74 = load i64, ptr %73, align 8, !dbg !134
  %75 = getelementptr inbounds %slice.3, ptr %71, i32 0, i32 1, !dbg !134
  %76 = load ptr, ptr %75, align 8, !dbg !134
  %77 = getelementptr i32, ptr %76, i64 %74, !dbg !134
  %78 = load i32, ptr %3, align 4, !dbg !134
  store i32 %78, ptr %77, align 4, !dbg !134
  %79 = load ptr, ptr %4, align 8, !dbg !135
  %80 = getelementptr inbounds %slice.3, ptr %79, i32 0, i32 0, !dbg !135
  %81 = load ptr, ptr %4, align 8, !dbg !135
  %82 = getelementptr inbounds %slice.3, ptr %81, i32 0, i32 0, !dbg !135
  %83 = load i64, ptr %82, align 8, !dbg !135
  %84 = add i64 %83, 1, !dbg !135
  store i64 %84, ptr %80, align 8, !dbg !135
  ret void, !dbg !136
}

define void @"array.create:(type,*mem.Allocator)->[]u8"(ptr %0, i64 %1, ptr %2) !dbg !137 {
block_0:
  %3 = alloca i64, align 8
  %4 = alloca ptr, align 8
  %5 = alloca i64, align 8
  %6 = alloca ptr, align 8
  %7 = alloca %slice.7, align 8
  %8 = alloca ptr, align 8
  %9 = alloca %mem.Allocator, align 8
  %10 = alloca %slice.7, align 8
  %11 = alloca %slice.7, align 8
  store i64 %1, ptr %3, align 8, !dbg !146
  call void @llvm.dbg.value(metadata ptr %3, metadata !147, metadata !DIExpression()), !dbg !146
  store ptr %2, ptr %4, align 8, !dbg !146
  call void @llvm.dbg.value(metadata ptr %4, metadata !148, metadata !DIExpression()), !dbg !146
  store i64 8, ptr %5, align 8, !dbg !149
  call void @llvm.dbg.declare(metadata ptr %5, metadata !150, metadata !DIExpression()), !dbg !149
  %12 = load ptr, ptr %4, align 8, !dbg !151
  %13 = getelementptr inbounds %mem.Allocator, ptr %12, i32 0, i32 0, !dbg !151
  %14 = load ptr, ptr %13, align 8, !dbg !151
  %15 = load i64, ptr %5, align 8, !dbg !151
  %16 = mul i64 %15, 1, !dbg !151
  %17 = add i64 %16, 32, !dbg !151
  %18 = load ptr, ptr %4, align 8, !dbg !151
  %19 = call ptr %14(i64 %17, ptr %18), !dbg !151
  store ptr %19, ptr %6, align 8, !dbg !151
  call void @llvm.dbg.declare(metadata ptr %6, metadata !152, metadata !DIExpression()), !dbg !151
  %20 = load ptr, ptr %6, align 8, !dbg !153
  %21 = icmp ne ptr %20, null, !dbg !153
  %22 = icmp eq i1 %21, false, !dbg !153
  br i1 %22, label %block_1, label %block_2, !dbg !153

block_1:                                          ; preds = %block_0
  call void @llvm.memcpy.p0.p0.i64(ptr align 8 %0, ptr align 8 %7, i64 16, i1 false), !dbg !154
  ret void, !dbg !154

block_2:                                          ; preds = %block_0
  br label %block_3, !dbg !154

block_3:                                          ; preds = %block_2
  %23 = load ptr, ptr %6, align 8, !dbg !155
  store ptr %23, ptr %8, align 8, !dbg !155
  call void @llvm.dbg.declare(metadata ptr %8, metadata !156, metadata !DIExpression()), !dbg !155
  %24 = load ptr, ptr %8, align 8, !dbg !157
  %25 = getelementptr inbounds %array.Header, ptr %24, i32 0, i32 0, !dbg !157
  %26 = load i64, ptr %5, align 8, !dbg !157
  store i64 %26, ptr %25, align 8, !dbg !157
  %27 = load ptr, ptr %8, align 8, !dbg !158
  %28 = getelementptr inbounds %array.Header, ptr %27, i32 0, i32 1, !dbg !158
  %29 = load ptr, ptr %4, align 8, !dbg !158
  call void @llvm.memcpy.p0.p0.i64(ptr align 8 %9, ptr align 8 %29, i64 24, i1 false), !dbg !158
  call void @llvm.memcpy.p0.p0.i64(ptr align 8 %28, ptr align 8 %9, i64 24, i1 false), !dbg !158
  call void @llvm.memcpy.p0.p0.i64(ptr align 8 %11, ptr align 8 %10, i64 16, i1 false), !dbg !159
  call void @llvm.dbg.declare(metadata ptr %11, metadata !160, metadata !DIExpression()), !dbg !159
  %30 = getelementptr inbounds %slice.7, ptr %11, i32 0, i32 1, !dbg !161
  %31 = load ptr, ptr %8, align 8, !dbg !161
  %32 = getelementptr %array.Header, ptr %31, i64 1, !dbg !161
  store ptr %32, ptr %30, align 8, !dbg !161
  %33 = getelementptr inbounds %slice.7, ptr %11, i32 0, i32 0, !dbg !162
  store i64 0, ptr %33, align 8, !dbg !162
  call void @llvm.memcpy.p0.p0.i64(ptr align 8 %0, ptr align 8 %11, i64 16, i1 false), !dbg !163
  ret void, !dbg !163
}

define void @"array.add:(*[]u8,u8)->void"(ptr %0, i8 %1) !dbg !164 {
block_0:
  %2 = alloca ptr, align 8
  %3 = alloca i8, align 1
  %4 = alloca ptr, align 8
  %5 = alloca ptr, align 8
  %6 = alloca i64, align 8
  %7 = alloca ptr, align 8
  %8 = alloca ptr, align 8
  store ptr %0, ptr %2, align 8, !dbg !168
  call void @llvm.dbg.value(metadata ptr %2, metadata !169, metadata !DIExpression()), !dbg !168
  store i8 %1, ptr %3, align 1, !dbg !168
  call void @llvm.dbg.value(metadata ptr %3, metadata !170, metadata !DIExpression()), !dbg !168
  %9 = load ptr, ptr %2, align 8, !dbg !171
  store ptr %9, ptr %4, align 8, !dbg !171
  call void @llvm.dbg.declare(metadata ptr %4, metadata !172, metadata !DIExpression()), !dbg !171
  %10 = load ptr, ptr %4, align 8, !dbg !173
  %11 = getelementptr inbounds %slice.7, ptr %10, i32 0, i32 1, !dbg !173
  %12 = load ptr, ptr %11, align 8, !dbg !173
  %13 = getelementptr %array.Header, ptr %12, i64 -1, !dbg !173
  store ptr %13, ptr %5, align 8, !dbg !173
  call void @llvm.dbg.declare(metadata ptr %5, metadata !174, metadata !DIExpression()), !dbg !173
  %14 = load ptr, ptr %4, align 8, !dbg !175
  %15 = getelementptr inbounds %slice.7, ptr %14, i32 0, i32 0, !dbg !175
  %16 = load i64, ptr %15, align 8, !dbg !175
  %17 = load ptr, ptr %5, align 8, !dbg !175
  %18 = getelementptr inbounds %array.Header, ptr %17, i32 0, i32 0, !dbg !175
  %19 = load i64, ptr %18, align 8, !dbg !175
  %20 = icmp sge i64 %16, %19, !dbg !175
  br i1 %20, label %block_1, label %block_2, !dbg !175

block_1:                                          ; preds = %block_0
  %21 = load ptr, ptr %5, align 8, !dbg !176
  %22 = getelementptr inbounds %array.Header, ptr %21, i32 0, i32 0, !dbg !176
  %23 = load i64, ptr %22, align 8, !dbg !176
  %24 = mul i64 %23, 2, !dbg !176
  store i64 %24, ptr %6, align 8, !dbg !176
  call void @llvm.dbg.declare(metadata ptr %6, metadata !177, metadata !DIExpression()), !dbg !176
  %25 = load ptr, ptr %5, align 8, !dbg !178
  %26 = getelementptr inbounds %array.Header, ptr %25, i32 0, i32 1, !dbg !178
  %27 = getelementptr inbounds %mem.Allocator, ptr %26, i32 0, i32 0, !dbg !178
  %28 = load ptr, ptr %27, align 8, !dbg !178
  %29 = load i64, ptr %6, align 8, !dbg !178
  %30 = mul i64 %29, 1, !dbg !178
  %31 = add i64 %30, 32, !dbg !178
  %32 = load ptr, ptr %5, align 8, !dbg !178
  %33 = getelementptr inbounds %array.Header, ptr %32, i32 0, i32 1, !dbg !178
  %34 = call ptr %28(i64 %31, ptr %33), !dbg !178
  store ptr %34, ptr %7, align 8, !dbg !178
  call void @llvm.dbg.declare(metadata ptr %7, metadata !179, metadata !DIExpression()), !dbg !178
  %35 = load ptr, ptr %7, align 8, !dbg !180
  %36 = icmp ne ptr %35, null, !dbg !180
  %37 = icmp eq i1 %36, false, !dbg !180
  br i1 %37, label %block_4, label %block_5, !dbg !180

block_4:                                          ; preds = %block_1
  %38 = load ptr, ptr %4, align 8, !dbg !181
  %39 = getelementptr inbounds %slice.7, ptr %38, i32 0, i32 1, !dbg !181
  store ptr null, ptr %39, align 8, !dbg !181
  %40 = load ptr, ptr %4, align 8, !dbg !182
  %41 = getelementptr inbounds %slice.7, ptr %40, i32 0, i32 0, !dbg !182
  store i64 0, ptr %41, align 8, !dbg !182
  ret void, !dbg !183

block_5:                                          ; preds = %block_1
  br label %block_6, !dbg !183

block_6:                                          ; preds = %block_5
  %42 = load ptr, ptr %7, align 8, !dbg !184
  store ptr %42, ptr %8, align 8, !dbg !184
  call void @llvm.dbg.declare(metadata ptr %8, metadata !185, metadata !DIExpression()), !dbg !184
  %43 = load ptr, ptr %8, align 8, !dbg !186
  %44 = getelementptr inbounds %array.Header, ptr %43, i32 0, i32 0, !dbg !186
  %45 = load i64, ptr %6, align 8, !dbg !186
  store i64 %45, ptr %44, align 8, !dbg !186
  %46 = load ptr, ptr %8, align 8, !dbg !187
  %47 = getelementptr inbounds %array.Header, ptr %46, i32 0, i32 1, !dbg !187
  %48 = load ptr, ptr %5, align 8, !dbg !187
  %49 = getelementptr inbounds %array.Header, ptr %48, i32 0, i32 1, !dbg !187
  call void @llvm.memcpy.p0.p0.i64(ptr align 8 %47, ptr align 8 %49, i64 24, i1 false), !dbg !187
  %50 = load ptr, ptr %8, align 8, !dbg !188
  %51 = getelementptr %array.Header, ptr %50, i64 1, !dbg !188
  %52 = load ptr, ptr %4, align 8, !dbg !188
  %53 = getelementptr inbounds %slice.7, ptr %52, i32 0, i32 1, !dbg !188
  %54 = load ptr, ptr %53, align 8, !dbg !188
  %55 = load ptr, ptr %4, align 8, !dbg !188
  %56 = getelementptr inbounds %slice.7, ptr %55, i32 0, i32 0, !dbg !188
  %57 = load i64, ptr %56, align 8, !dbg !188
  %58 = mul i64 %57, 1, !dbg !188
  %59 = call ptr @memcpy(ptr %51, ptr %54, i64 %58), !dbg !188
  %60 = load ptr, ptr %8, align 8, !dbg !189
  %61 = getelementptr inbounds %array.Header, ptr %60, i32 0, i32 1, !dbg !189
  %62 = getelementptr inbounds %mem.Allocator, ptr %61, i32 0, i32 1, !dbg !189
  %63 = load ptr, ptr %62, align 8, !dbg !189
  %64 = load ptr, ptr %5, align 8, !dbg !189
  %65 = load ptr, ptr %8, align 8, !dbg !189
  %66 = getelementptr inbounds %array.Header, ptr %65, i32 0, i32 1, !dbg !189
  call void %63(ptr %64, ptr %66), !dbg !189
  %67 = load ptr, ptr %4, align 8, !dbg !190
  %68 = getelementptr inbounds %slice.7, ptr %67, i32 0, i32 1, !dbg !190
  %69 = load ptr, ptr %8, align 8, !dbg !190
  %70 = getelementptr %array.Header, ptr %69, i64 1, !dbg !190
  store ptr %70, ptr %68, align 8, !dbg !190
  br label %block_3, !dbg !190

block_2:                                          ; preds = %block_0
  br label %block_3, !dbg !190

block_3:                                          ; preds = %block_2, %block_6
  %71 = load ptr, ptr %4, align 8, !dbg !191
  %72 = load ptr, ptr %4, align 8, !dbg !191
  %73 = getelementptr inbounds %slice.7, ptr %72, i32 0, i32 0, !dbg !191
  %74 = load i64, ptr %73, align 8, !dbg !191
  %75 = getelementptr inbounds %slice.7, ptr %71, i32 0, i32 1, !dbg !191
  %76 = load ptr, ptr %75, align 8, !dbg !191
  %77 = getelementptr i8, ptr %76, i64 %74, !dbg !191
  %78 = load i8, ptr %3, align 1, !dbg !191
  store i8 %78, ptr %77, align 1, !dbg !191
  %79 = load ptr, ptr %4, align 8, !dbg !192
  %80 = getelementptr inbounds %slice.7, ptr %79, i32 0, i32 0, !dbg !192
  %81 = load ptr, ptr %4, align 8, !dbg !192
  %82 = getelementptr inbounds %slice.7, ptr %81, i32 0, i32 0, !dbg !192
  %83 = load i64, ptr %82, align 8, !dbg !192
  %84 = add i64 %83, 1, !dbg !192
  store i64 %84, ptr %80, align 8, !dbg !192
  ret void, !dbg !193
}

define void @"array.create:(type,*mem.Allocator)->[]u32"(ptr %0, i64 %1, ptr %2) !dbg !194 {
block_0:
  %3 = alloca i64, align 8
  %4 = alloca ptr, align 8
  %5 = alloca i64, align 8
  %6 = alloca ptr, align 8
  %7 = alloca %slice.3, align 8
  %8 = alloca ptr, align 8
  %9 = alloca %mem.Allocator, align 8
  %10 = alloca %slice.3, align 8
  %11 = alloca %slice.3, align 8
  store i64 %1, ptr %3, align 8, !dbg !197
  call void @llvm.dbg.value(metadata ptr %3, metadata !198, metadata !DIExpression()), !dbg !197
  store ptr %2, ptr %4, align 8, !dbg !197
  call void @llvm.dbg.value(metadata ptr %4, metadata !199, metadata !DIExpression()), !dbg !197
  store i64 8, ptr %5, align 8, !dbg !200
  call void @llvm.dbg.declare(metadata ptr %5, metadata !201, metadata !DIExpression()), !dbg !200
  %12 = load ptr, ptr %4, align 8, !dbg !202
  %13 = getelementptr inbounds %mem.Allocator, ptr %12, i32 0, i32 0, !dbg !202
  %14 = load ptr, ptr %13, align 8, !dbg !202
  %15 = load i64, ptr %5, align 8, !dbg !202
  %16 = mul i64 %15, 4, !dbg !202
  %17 = add i64 %16, 32, !dbg !202
  %18 = load ptr, ptr %4, align 8, !dbg !202
  %19 = call ptr %14(i64 %17, ptr %18), !dbg !202
  store ptr %19, ptr %6, align 8, !dbg !202
  call void @llvm.dbg.declare(metadata ptr %6, metadata !203, metadata !DIExpression()), !dbg !202
  %20 = load ptr, ptr %6, align 8, !dbg !204
  %21 = icmp ne ptr %20, null, !dbg !204
  %22 = icmp eq i1 %21, false, !dbg !204
  br i1 %22, label %block_1, label %block_2, !dbg !204

block_1:                                          ; preds = %block_0
  call void @llvm.memcpy.p0.p0.i64(ptr align 8 %0, ptr align 8 %7, i64 16, i1 false), !dbg !205
  ret void, !dbg !205

block_2:                                          ; preds = %block_0
  br label %block_3, !dbg !205

block_3:                                          ; preds = %block_2
  %23 = load ptr, ptr %6, align 8, !dbg !206
  store ptr %23, ptr %8, align 8, !dbg !206
  call void @llvm.dbg.declare(metadata ptr %8, metadata !207, metadata !DIExpression()), !dbg !206
  %24 = load ptr, ptr %8, align 8, !dbg !208
  %25 = getelementptr inbounds %array.Header, ptr %24, i32 0, i32 0, !dbg !208
  %26 = load i64, ptr %5, align 8, !dbg !208
  store i64 %26, ptr %25, align 8, !dbg !208
  %27 = load ptr, ptr %8, align 8, !dbg !209
  %28 = getelementptr inbounds %array.Header, ptr %27, i32 0, i32 1, !dbg !209
  %29 = load ptr, ptr %4, align 8, !dbg !209
  call void @llvm.memcpy.p0.p0.i64(ptr align 8 %9, ptr align 8 %29, i64 24, i1 false), !dbg !209
  call void @llvm.memcpy.p0.p0.i64(ptr align 8 %28, ptr align 8 %9, i64 24, i1 false), !dbg !209
  call void @llvm.memcpy.p0.p0.i64(ptr align 8 %11, ptr align 8 %10, i64 16, i1 false), !dbg !210
  call void @llvm.dbg.declare(metadata ptr %11, metadata !211, metadata !DIExpression()), !dbg !210
  %30 = getelementptr inbounds %slice.3, ptr %11, i32 0, i32 1, !dbg !212
  %31 = load ptr, ptr %8, align 8, !dbg !212
  %32 = getelementptr %array.Header, ptr %31, i64 1, !dbg !212
  store ptr %32, ptr %30, align 8, !dbg !212
  %33 = getelementptr inbounds %slice.3, ptr %11, i32 0, i32 0, !dbg !213
  store i64 0, ptr %33, align 8, !dbg !213
  call void @llvm.memcpy.p0.p0.i64(ptr align 8 %0, ptr align 8 %11, i64 16, i1 false), !dbg !214
  ret void, !dbg !214
}

define void @"array.free:(*[]u32)->void"(ptr %0) !dbg !215 {
block_0:
  %1 = alloca ptr, align 8
  %2 = alloca ptr, align 8
  %3 = alloca ptr, align 8
  store ptr %0, ptr %1, align 8, !dbg !218
  call void @llvm.dbg.value(metadata ptr %1, metadata !219, metadata !DIExpression()), !dbg !218
  %4 = load ptr, ptr %1, align 8, !dbg !220
  store ptr %4, ptr %2, align 8, !dbg !220
  call void @llvm.dbg.declare(metadata ptr %2, metadata !221, metadata !DIExpression()), !dbg !220
  %5 = load ptr, ptr %2, align 8, !dbg !222
  %6 = getelementptr inbounds %slice.3, ptr %5, i32 0, i32 1, !dbg !222
  %7 = load ptr, ptr %6, align 8, !dbg !222
  %8 = getelementptr %array.Header, ptr %7, i64 -1, !dbg !222
  store ptr %8, ptr %3, align 8, !dbg !222
  call void @llvm.dbg.declare(metadata ptr %3, metadata !223, metadata !DIExpression()), !dbg !222
  %9 = load ptr, ptr %3, align 8, !dbg !224
  %10 = getelementptr inbounds %array.Header, ptr %9, i32 0, i32 1, !dbg !224
  %11 = getelementptr inbounds %mem.Allocator, ptr %10, i32 0, i32 1, !dbg !224
  %12 = load ptr, ptr %11, align 8, !dbg !224
  %13 = load ptr, ptr %3, align 8, !dbg !224
  %14 = load ptr, ptr %3, align 8, !dbg !224
  %15 = getelementptr inbounds %array.Header, ptr %14, i32 0, i32 1, !dbg !224
  call void %12(ptr %13, ptr %15), !dbg !224
  %16 = load ptr, ptr %2, align 8, !dbg !225
  %17 = getelementptr inbounds %slice.3, ptr %16, i32 0, i32 1, !dbg !225
  store ptr null, ptr %17, align 8, !dbg !225
  %18 = load ptr, ptr %2, align 8, !dbg !226
  %19 = getelementptr inbounds %slice.3, ptr %18, i32 0, i32 0, !dbg !226
  store i64 0, ptr %19, align 8, !dbg !226
  ret void, !dbg !227
}

define void @"array.free:(*[]u8)->void"(ptr %0) !dbg !228 {
block_0:
  %1 = alloca ptr, align 8
  %2 = alloca ptr, align 8
  %3 = alloca ptr, align 8
  store ptr %0, ptr %1, align 8, !dbg !231
  call void @llvm.dbg.value(metadata ptr %1, metadata !232, metadata !DIExpression()), !dbg !231
  %4 = load ptr, ptr %1, align 8, !dbg !233
  store ptr %4, ptr %2, align 8, !dbg !233
  call void @llvm.dbg.declare(metadata ptr %2, metadata !234, metadata !DIExpression()), !dbg !233
  %5 = load ptr, ptr %2, align 8, !dbg !235
  %6 = getelementptr inbounds %slice.7, ptr %5, i32 0, i32 1, !dbg !235
  %7 = load ptr, ptr %6, align 8, !dbg !235
  %8 = getelementptr %array.Header, ptr %7, i64 -1, !dbg !235
  store ptr %8, ptr %3, align 8, !dbg !235
  call void @llvm.dbg.declare(metadata ptr %3, metadata !236, metadata !DIExpression()), !dbg !235
  %9 = load ptr, ptr %3, align 8, !dbg !237
  %10 = getelementptr inbounds %array.Header, ptr %9, i32 0, i32 1, !dbg !237
  %11 = getelementptr inbounds %mem.Allocator, ptr %10, i32 0, i32 1, !dbg !237
  %12 = load ptr, ptr %11, align 8, !dbg !237
  %13 = load ptr, ptr %3, align 8, !dbg !237
  %14 = load ptr, ptr %3, align 8, !dbg !237
  %15 = getelementptr inbounds %array.Header, ptr %14, i32 0, i32 1, !dbg !237
  call void %12(ptr %13, ptr %15), !dbg !237
  %16 = load ptr, ptr %2, align 8, !dbg !238
  %17 = getelementptr inbounds %slice.7, ptr %16, i32 0, i32 1, !dbg !238
  store ptr null, ptr %17, align 8, !dbg !238
  %18 = load ptr, ptr %2, align 8, !dbg !239
  %19 = getelementptr inbounds %slice.7, ptr %18, i32 0, i32 0, !dbg !239
  store i64 0, ptr %19, align 8, !dbg !239
  ret void, !dbg !240
}

; Function Attrs: nocallback nofree nosync nounwind speculatable willreturn memory(none)
declare void @llvm.dbg.value(metadata, metadata, metadata) #0

; Function Attrs: nocallback nofree nosync nounwind speculatable willreturn memory(none)
declare void @llvm.dbg.declare(metadata, metadata, metadata) #0

; Function Attrs: nocallback nofree nounwind willreturn memory(argmem: readwrite)
declare void @llvm.memcpy.p0.p0.i64(ptr noalias nocapture writeonly, ptr noalias nocapture readonly, i64, i1 immarg) #1

attributes #0 = { nocallback nofree nosync nounwind speculatable willreturn memory(none) }
attributes #1 = { nocallback nofree nounwind willreturn memory(argmem: readwrite) }

!llvm.dbg.cu = !{!0}
!llvm.module.flags = !{!77, !78}

!0 = distinct !DICompileUnit(language: DW_LANG_C99, file: !1, producer: "RCP Compiler", isOptimized: false, runtimeVersion: 0, emissionKind: FullDebug, enums: !2, splitDebugInlining: false)
!1 = !DIFile(filename: "array.rcp", directory: "E:\\C_Projects\\ReComp\\std")
!2 = !{!3, !15, !36, !45, !50, !54, !65, !71}
!3 = !DICompositeType(tag: DW_TAG_enumeration_type, name: "init.TypeKind", scope: !1, file: !1, size: 64, align: 64, elements: !4)
!4 = !{!5, !6, !7, !8, !9, !10, !11, !12, !13, !14}
!5 = !DIEnumerator(name: "Invalid", value: 0, isUnsigned: true)
!6 = !DIEnumerator(name: "Basic", value: 1, isUnsigned: true)
!7 = !DIEnumerator(name: "Function", value: 2, isUnsigned: true)
!8 = !DIEnumerator(name: "Struct", value: 3, isUnsigned: true)
!9 = !DIEnumerator(name: "Pointer", value: 4, isUnsigned: true)
!10 = !DIEnumerator(name: "Array", value: 5, isUnsigned: true)
!11 = !DIEnumerator(name: "Slice", value: 6, isUnsigned: true)
!12 = !DIEnumerator(name: "Vector", value: 7, isUnsigned: true)
!13 = !DIEnumerator(name: "Enum", value: 8, isUnsigned: true)
!14 = !DIEnumerator(name: "Generic", value: 9, isUnsigned: true)
!15 = !DICompositeType(tag: DW_TAG_enumeration_type, name: "init.BasicKind", scope: !1, file: !1, size: 64, align: 64, elements: !16)
!16 = !{!17, !18, !19, !20, !21, !22, !23, !24, !25, !26, !27, !28, !29, !30, !31, !32, !33, !34, !35}
!17 = !DIEnumerator(name: "Bool", value: 0, isUnsigned: true)
!18 = !DIEnumerator(name: "String", value: 1, isUnsigned: true)
!19 = !DIEnumerator(name: "U8", value: 2, isUnsigned: true)
!20 = !DIEnumerator(name: "U16", value: 3, isUnsigned: true)
!21 = !DIEnumerator(name: "U32", value: 4, isUnsigned: true)
!22 = !DIEnumerator(name: "U64", value: 5, isUnsigned: true)
!23 = !DIEnumerator(name: "I8", value: 6, isUnsigned: true)
!24 = !DIEnumerator(name: "I16", value: 7, isUnsigned: true)
!25 = !DIEnumerator(name: "I32", value: 8, isUnsigned: true)
!26 = !DIEnumerator(name: "I64", value: 9, isUnsigned: true)
!27 = !DIEnumerator(name: "F32", value: 10, isUnsigned: true)
!28 = !DIEnumerator(name: "F64", value: 11, isUnsigned: true)
!29 = !DIEnumerator(name: "untypedInteger", value: 12, isUnsigned: true)
!30 = !DIEnumerator(name: "untypedFloat", value: 13, isUnsigned: true)
!31 = !DIEnumerator(name: "Int", value: 14, isUnsigned: true)
!32 = !DIEnumerator(name: "Uint", value: 15, isUnsigned: true)
!33 = !DIEnumerator(name: "Type", value: 16, isUnsigned: true)
!34 = !DIEnumerator(name: "Auto", value: 17, isUnsigned: true)
!35 = !DIEnumerator(name: "Module", value: 18, isUnsigned: true)
!36 = !DICompositeType(tag: DW_TAG_enumeration_type, name: "init.BasicFlag", scope: !1, file: !1, size: 32, align: 32, elements: !37)
!37 = !{!38, !39, !40, !41, !42, !43, !44}
!38 = !DIEnumerator(name: "Boolean", value: 1, isUnsigned: true)
!39 = !DIEnumerator(name: "Integer", value: 2, isUnsigned: true)
!40 = !DIEnumerator(name: "Float", value: 4, isUnsigned: true)
!41 = !DIEnumerator(name: "String", value: 8, isUnsigned: true)
!42 = !DIEnumerator(name: "Untyped", value: 32, isUnsigned: true)
!43 = !DIEnumerator(name: "Unsigned", value: 64, isUnsigned: true)
!44 = !DIEnumerator(name: "TypeID", value: 128, isUnsigned: true)
!45 = !DICompositeType(tag: DW_TAG_enumeration_type, name: "init.StructFlag", scope: !1, file: !1, size: 32, align: 32, elements: !46)
!46 = !{!47, !48, !49}
!47 = !DIEnumerator(name: "Packed", value: 1, isUnsigned: true)
!48 = !DIEnumerator(name: "Generic", value: 2, isUnsigned: true)
!49 = !DIEnumerator(name: "Union", value: 4, isUnsigned: true)
!50 = !DICompositeType(tag: DW_TAG_enumeration_type, name: "init.VectorKind", scope: !1, file: !1, size: 64, align: 64, elements: !51)
!51 = !{!52, !53}
!52 = !DIEnumerator(name: "Float", value: 0, isUnsigned: true)
!53 = !DIEnumerator(name: "Int", value: 1, isUnsigned: true)
!54 = !DICompositeType(tag: DW_TAG_enumeration_type, name: "compile.CompileFlag", scope: !1, file: !1, size: 32, align: 32, elements: !55)
!55 = !{!56, !57, !58, !59, !60, !61, !62, !63, !64}
!56 = !DIEnumerator(name: "Debug", value: 1, isUnsigned: true)
!57 = !DIEnumerator(name: "SanAddress", value: 2, isUnsigned: true)
!58 = !DIEnumerator(name: "SanMemory", value: 4, isUnsigned: true)
!59 = !DIEnumerator(name: "SanThread", value: 8, isUnsigned: true)
!60 = !DIEnumerator(name: "SanUndefined", value: 16, isUnsigned: true)
!61 = !DIEnumerator(name: "NoStdLib", value: 32, isUnsigned: true)
!62 = !DIEnumerator(name: "SharedLib", value: 64, isUnsigned: true)
!63 = !DIEnumerator(name: "CrossAndroid", value: 128, isUnsigned: true)
!64 = !DIEnumerator(name: "NoLink", value: 256, isUnsigned: true)
!65 = !DICompositeType(tag: DW_TAG_enumeration_type, name: "compile.Arch", scope: !1, file: !1, size: 32, align: 32, elements: !66)
!66 = !{!67, !68, !69, !70}
!67 = !DIEnumerator(name: "x86_64", value: 0, isUnsigned: true)
!68 = !DIEnumerator(name: "x86", value: 1, isUnsigned: true)
!69 = !DIEnumerator(name: "Arm32", value: 2, isUnsigned: true)
!70 = !DIEnumerator(name: "Arm64", value: 4, isUnsigned: true)
!71 = !DICompositeType(tag: DW_TAG_enumeration_type, name: "main.Tile", scope: !1, file: !1, size: 64, align: 64, elements: !72)
!72 = !{!73, !74, !75, !76}
!73 = !DIEnumerator(name: "Wall", value: 0, isUnsigned: true)
!74 = !DIEnumerator(name: "Empty", value: 1, isUnsigned: true)
!75 = !DIEnumerator(name: "Start", value: 2, isUnsigned: true)
!76 = !DIEnumerator(name: "End", value: 3, isUnsigned: true)
!77 = !{i32 2, !"CodeView", i32 1}
!78 = !{i32 2, !"Debug Info Version", i32 3}
!79 = distinct !DISubprogram(name: "add:(*[]u32,u32)->void", linkageName: "array.add:(*[]u32,u32)->void", scope: !1, file: !1, line: 26, type: !80, spFlags: DISPFlagDefinition, unit: !0, retainedNodes: !90)
!80 = !DISubroutineType(types: !81)
!81 = !{null, !82, !89}
!82 = !DIDerivedType(tag: DW_TAG_pointer_type, name: "*[]u32", baseType: !83, size: 64, align: 64, dwarfAddressSpace: 0)
!83 = !DICompositeType(tag: DW_TAG_structure_type, scope: !1, file: !1, size: 128, align: 64, elements: !84)
!84 = !{!85, !87}
!85 = !DIDerivedType(tag: DW_TAG_member, name: "count", scope: !1, file: !1, baseType: !86, size: 64, align: 64)
!86 = !DIBasicType(name: "int", size: 64, encoding: DW_ATE_signed)
!87 = !DIDerivedType(tag: DW_TAG_member, name: "data", scope: !1, file: !1, baseType: !88, size: 64, align: 64, offset: 64)
!88 = !DIDerivedType(tag: DW_TAG_pointer_type, name: "*u32", baseType: !89, size: 64, align: 64, dwarfAddressSpace: 0)
!89 = !DIBasicType(name: "u32", size: 32, encoding: DW_ATE_unsigned)
!90 = !{}
!91 = !DILocation(line: 26, scope: !79)
!92 = !DILocalVariable(name: "arg_arr", scope: !79, file: !1, line: 26, type: !82)
!93 = !DILocalVariable(name: "item", arg: 1, scope: !79, file: !1, line: 26, type: !89)
!94 = !DILocation(line: 27, scope: !79)
!95 = !DILocalVariable(name: "arr", scope: !79, file: !1, line: 27, type: !82)
!96 = !DILocation(line: 28, scope: !79)
!97 = !DILocalVariable(name: "header", scope: !79, file: !1, line: 28, type: !98)
!98 = !DIDerivedType(tag: DW_TAG_pointer_type, name: "*array.Header", baseType: !99, size: 64, align: 64, dwarfAddressSpace: 0)
!99 = !DICompositeType(tag: DW_TAG_structure_type, name: "array.Header", scope: !1, file: !1, size: 256, elements: !100)
!100 = !{!101, !102}
!101 = !DIDerivedType(tag: DW_TAG_member, name: "capacity", scope: !1, file: !1, baseType: !86, size: 64, align: 64)
!102 = !DIDerivedType(tag: DW_TAG_member, name: "allocator", scope: !1, file: !1, baseType: !103, size: 192, align: 64, offset: 64)
!103 = !DICompositeType(tag: DW_TAG_structure_type, name: "mem.Allocator", scope: !1, file: !1, size: 192, elements: !104)
!104 = !{!105, !112, !116}
!105 = !DIDerivedType(tag: DW_TAG_member, name: "alloc", scope: !1, file: !1, baseType: !106, size: 64, align: 64)
!106 = !DIDerivedType(tag: DW_TAG_pointer_type, name: "*fn(int, *mem.Allocator) -> ?*", baseType: !107, size: 64, align: 64, dwarfAddressSpace: 0)
!107 = !DISubroutineType(types: !108)
!108 = !{!109, !86, !110}
!109 = !DIDerivedType(tag: DW_TAG_pointer_type, name: "*void", baseType: null, size: 64, align: 64, dwarfAddressSpace: 0)
!110 = !DIDerivedType(tag: DW_TAG_pointer_type, name: "*mem.Allocator", baseType: !111, size: 64, align: 64, dwarfAddressSpace: 0)
!111 = !DICompositeType(tag: DW_TAG_structure_type, name: "mem.Allocator", scope: !1, file: !1, size: 192, align: 64, flags: DIFlagFwdDecl)
!112 = !DIDerivedType(tag: DW_TAG_member, name: "free", scope: !1, file: !1, baseType: !113, size: 64, align: 64, offset: 64)
!113 = !DIDerivedType(tag: DW_TAG_pointer_type, name: "*fn(*, *mem.Allocator)", baseType: !114, size: 64, align: 64, dwarfAddressSpace: 0)
!114 = !DISubroutineType(types: !115)
!115 = !{null, !109, !110}
!116 = !DIDerivedType(tag: DW_TAG_member, name: "data", scope: !1, file: !1, baseType: !109, size: 64, align: 64, offset: 128)
!117 = !DILocation(line: 29, scope: !79)
!118 = !DILocation(line: 30, scope: !79)
!119 = !DILocalVariable(name: "new_capacity", scope: !79, file: !1, line: 30, type: !86)
!120 = !DILocation(line: 31, scope: !79)
!121 = !DILocalVariable(name: "maybe_ptr", scope: !79, file: !1, line: 31, type: !122)
!122 = !DIDerivedType(tag: DW_TAG_pointer_type, name: "?*array.Header", baseType: !99, size: 64, align: 64, dwarfAddressSpace: 0)
!123 = !DILocation(line: 32, scope: !79)
!124 = !DILocation(line: 33, scope: !79)
!125 = !DILocation(line: 34, scope: !79)
!126 = !DILocation(line: 35, scope: !79)
!127 = !DILocation(line: 38, scope: !79)
!128 = !DILocalVariable(name: "ptr", scope: !79, file: !1, line: 38, type: !98)
!129 = !DILocation(line: 39, scope: !79)
!130 = !DILocation(line: 40, scope: !79)
!131 = !DILocation(line: 41, scope: !79)
!132 = !DILocation(line: 42, scope: !79)
!133 = !DILocation(line: 43, scope: !79)
!134 = !DILocation(line: 46, scope: !79)
!135 = !DILocation(line: 47, scope: !79)
!136 = !DILocation(line: 48, scope: !79)
!137 = distinct !DISubprogram(name: "create:(type,*mem.Allocator)->[]u8", linkageName: "array.create:(type,*mem.Allocator)->[]u8", scope: !1, file: !1, line: 10, type: !138, spFlags: DISPFlagDefinition, unit: !0, retainedNodes: !90)
!138 = !DISubroutineType(types: !139)
!139 = !{!140, !145, !110}
!140 = !DICompositeType(tag: DW_TAG_structure_type, scope: !1, file: !1, size: 128, align: 64, elements: !141)
!141 = !{!85, !142}
!142 = !DIDerivedType(tag: DW_TAG_member, name: "data", scope: !1, file: !1, baseType: !143, size: 64, align: 64, offset: 64)
!143 = !DIDerivedType(tag: DW_TAG_pointer_type, name: "*u8", baseType: !144, size: 64, align: 64, dwarfAddressSpace: 0)
!144 = !DIBasicType(name: "u8", size: 8, encoding: DW_ATE_unsigned)
!145 = !DIBasicType(name: "type", size: 64, encoding: DW_ATE_unsigned)
!146 = !DILocation(line: 10, scope: !137)
!147 = !DILocalVariable(name: "T", scope: !137, file: !1, line: 10, type: !145)
!148 = !DILocalVariable(name: "allocator", arg: 1, scope: !137, file: !1, line: 10, type: !110)
!149 = !DILocation(line: 11, scope: !137)
!150 = !DILocalVariable(name: "INITIAL_CAPACITY", scope: !137, file: !1, line: 11, type: !86)
!151 = !DILocation(line: 12, scope: !137)
!152 = !DILocalVariable(name: "maybe_ptr", scope: !137, file: !1, line: 12, type: !122)
!153 = !DILocation(line: 13, scope: !137)
!154 = !DILocation(line: 14, scope: !137)
!155 = !DILocation(line: 16, scope: !137)
!156 = !DILocalVariable(name: "ptr", scope: !137, file: !1, line: 16, type: !98)
!157 = !DILocation(line: 17, scope: !137)
!158 = !DILocation(line: 18, scope: !137)
!159 = !DILocation(line: 20, scope: !137)
!160 = !DILocalVariable(name: "res", scope: !137, file: !1, line: 20, type: !140)
!161 = !DILocation(line: 21, scope: !137)
!162 = !DILocation(line: 22, scope: !137)
!163 = !DILocation(line: 23, scope: !137)
!164 = distinct !DISubprogram(name: "add:(*[]u8,u8)->void", linkageName: "array.add:(*[]u8,u8)->void", scope: !1, file: !1, line: 26, type: !165, spFlags: DISPFlagDefinition, unit: !0, retainedNodes: !90)
!165 = !DISubroutineType(types: !166)
!166 = !{null, !167, !144}
!167 = !DIDerivedType(tag: DW_TAG_pointer_type, name: "*[]u8", baseType: !140, size: 64, align: 64, dwarfAddressSpace: 0)
!168 = !DILocation(line: 26, scope: !164)
!169 = !DILocalVariable(name: "arg_arr", scope: !164, file: !1, line: 26, type: !167)
!170 = !DILocalVariable(name: "item", arg: 1, scope: !164, file: !1, line: 26, type: !144)
!171 = !DILocation(line: 27, scope: !164)
!172 = !DILocalVariable(name: "arr", scope: !164, file: !1, line: 27, type: !167)
!173 = !DILocation(line: 28, scope: !164)
!174 = !DILocalVariable(name: "header", scope: !164, file: !1, line: 28, type: !98)
!175 = !DILocation(line: 29, scope: !164)
!176 = !DILocation(line: 30, scope: !164)
!177 = !DILocalVariable(name: "new_capacity", scope: !164, file: !1, line: 30, type: !86)
!178 = !DILocation(line: 31, scope: !164)
!179 = !DILocalVariable(name: "maybe_ptr", scope: !164, file: !1, line: 31, type: !122)
!180 = !DILocation(line: 32, scope: !164)
!181 = !DILocation(line: 33, scope: !164)
!182 = !DILocation(line: 34, scope: !164)
!183 = !DILocation(line: 35, scope: !164)
!184 = !DILocation(line: 38, scope: !164)
!185 = !DILocalVariable(name: "ptr", scope: !164, file: !1, line: 38, type: !98)
!186 = !DILocation(line: 39, scope: !164)
!187 = !DILocation(line: 40, scope: !164)
!188 = !DILocation(line: 41, scope: !164)
!189 = !DILocation(line: 42, scope: !164)
!190 = !DILocation(line: 43, scope: !164)
!191 = !DILocation(line: 46, scope: !164)
!192 = !DILocation(line: 47, scope: !164)
!193 = !DILocation(line: 48, scope: !164)
!194 = distinct !DISubprogram(name: "create:(type,*mem.Allocator)->[]u32", linkageName: "array.create:(type,*mem.Allocator)->[]u32", scope: !1, file: !1, line: 10, type: !195, spFlags: DISPFlagDefinition, unit: !0, retainedNodes: !90)
!195 = !DISubroutineType(types: !196)
!196 = !{!83, !145, !110}
!197 = !DILocation(line: 10, scope: !194)
!198 = !DILocalVariable(name: "T", scope: !194, file: !1, line: 10, type: !145)
!199 = !DILocalVariable(name: "allocator", arg: 1, scope: !194, file: !1, line: 10, type: !110)
!200 = !DILocation(line: 11, scope: !194)
!201 = !DILocalVariable(name: "INITIAL_CAPACITY", scope: !194, file: !1, line: 11, type: !86)
!202 = !DILocation(line: 12, scope: !194)
!203 = !DILocalVariable(name: "maybe_ptr", scope: !194, file: !1, line: 12, type: !122)
!204 = !DILocation(line: 13, scope: !194)
!205 = !DILocation(line: 14, scope: !194)
!206 = !DILocation(line: 16, scope: !194)
!207 = !DILocalVariable(name: "ptr", scope: !194, file: !1, line: 16, type: !98)
!208 = !DILocation(line: 17, scope: !194)
!209 = !DILocation(line: 18, scope: !194)
!210 = !DILocation(line: 20, scope: !194)
!211 = !DILocalVariable(name: "res", scope: !194, file: !1, line: 20, type: !83)
!212 = !DILocation(line: 21, scope: !194)
!213 = !DILocation(line: 22, scope: !194)
!214 = !DILocation(line: 23, scope: !194)
!215 = distinct !DISubprogram(name: "free:(*[]u32)->void", linkageName: "array.free:(*[]u32)->void", scope: !1, file: !1, line: 50, type: !216, spFlags: DISPFlagDefinition, unit: !0, retainedNodes: !90)
!216 = !DISubroutineType(types: !217)
!217 = !{null, !82}
!218 = !DILocation(line: 50, scope: !215)
!219 = !DILocalVariable(name: "arg_arr", scope: !215, file: !1, line: 50, type: !82)
!220 = !DILocation(line: 51, scope: !215)
!221 = !DILocalVariable(name: "arr", scope: !215, file: !1, line: 51, type: !82)
!222 = !DILocation(line: 52, scope: !215)
!223 = !DILocalVariable(name: "header", scope: !215, file: !1, line: 52, type: !98)
!224 = !DILocation(line: 53, scope: !215)
!225 = !DILocation(line: 54, scope: !215)
!226 = !DILocation(line: 55, scope: !215)
!227 = !DILocation(line: 56, scope: !215)
!228 = distinct !DISubprogram(name: "free:(*[]u8)->void", linkageName: "array.free:(*[]u8)->void", scope: !1, file: !1, line: 50, type: !229, spFlags: DISPFlagDefinition, unit: !0, retainedNodes: !90)
!229 = !DISubroutineType(types: !230)
!230 = !{null, !167}
!231 = !DILocation(line: 50, scope: !228)
!232 = !DILocalVariable(name: "arg_arr", scope: !228, file: !1, line: 50, type: !167)
!233 = !DILocation(line: 51, scope: !228)
!234 = !DILocalVariable(name: "arr", scope: !228, file: !1, line: 51, type: !167)
!235 = !DILocation(line: 52, scope: !228)
!236 = !DILocalVariable(name: "header", scope: !228, file: !1, line: 52, type: !98)
!237 = !DILocation(line: 53, scope: !228)
!238 = !DILocation(line: 54, scope: !228)
!239 = !DILocation(line: 55, scope: !228)
!240 = !DILocation(line: 56, scope: !228)
