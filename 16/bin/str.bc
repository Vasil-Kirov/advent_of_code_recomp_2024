; ModuleID = 'str'
source_filename = "strings.rcp"
target datalayout = "e-m:w-p270:32:32-p271:32:32-p272:64:64-i64:64-i128:128-f80:128-n8:16:32:64-S128"
target triple = "x86_64-pc-windows-msvc"

%slice.6 = type { i64, ptr }
%string = type { ptr, i64 }
%str.Builder = type { %slice.3 }
%slice.3 = type { i64, ptr }
%slice.7 = type { i64, ptr }

@main.input = external global ptr
@init.INVALID_TYPE = external global i64
@init.type_table = external global %slice.6
@os.STD_INPUT_HANDLE = external global i32
@os.STD_OUTPUT_HANDLE = external global i32
@os.STD_ERROR_HANDLE = external global i32
@os.INVALID_HANDLE_VALUE = external global ptr
@os.CP_UTF7 = external global i32
@os.CP_UTF8 = external global i32
@os.MEM_COMMIT = external global i32
@os.MEM_RESERVE = external global i32
@os.MEM_RELEASE = external global i32
@os.PAGE_NOACCESS = external global i32
@os.PAGE_READONLY = external global i32
@os.PAGE_READWRITE = external global i32
@os.PAGE_WRITECOPY = external global i32
@os.PAGE_EXECUTE = external global i32
@os.PAGE_EXECUTE_READ = external global i32
@os.PAGE_EXECUTE_READWRITE = external global i32
@os.PAGE_EXECUTE_WRITECOPY = external global i32
@os.PAGE_GUARD = external global i32
@os.PAGE_NOCACHE = external global i32
@os.PAGE_WRITECOMBINE = external global i32
@str.CONTINUE_BIT = global i8 0

define void @str.__GlobalInitializerFunction.0() {
block_0:
  store i8 -128, ptr @str.CONTINUE_BIT, align 1
  ret void
}

declare void @main.get_map(ptr, ptr, ptr, ptr)

declare i32 @main.main()

declare void @init.global_initializers()

declare i64 @init.get_struct_alignment(i64)

declare i64 @init.get_type_alignment(i64)

declare i64 @init.get_basic_type_size(ptr)

declare i64 @init.get_struct_size(i64)

declare i64 @init.get_type_size(i64)

declare i64 @init.get_struct_member_offset(ptr, i64)

declare i32 @main.main.1()

declare i32 @main()

declare void @os.assert(i1, ptr)

declare i1 @WriteFile(ptr, ptr, i32, ptr, ptr)

declare ptr @GetStdHandle(i32)

declare void @ExitProcess(i32)

declare i32 @SetConsoleOutputCP(i32)

declare ptr @VirtualAlloc(ptr, i64, i32, i32)

declare i1 @VirtualFree(ptr, i64, i32)

declare i1 @ReadConsoleA(ptr, ptr, i32, ptr, ptr)

declare void @os.abort()

declare void @os.print(ptr, i32)

declare ptr @os.alloc(i64)

declare void @os.free(ptr)

declare i32 @os.read_stdin_line(ptr, i32)

declare void @io.push_string(ptr, ptr)

declare void @io.format_uint(ptr, i64)

declare void @io.format_int(ptr, i64)

declare void @io.print_typetype(ptr, ptr)

declare void @io.print_type(ptr, ptr)

declare void @io.builder_to_string(ptr, ptr)

declare void @io.print_type_with_formatter(ptr, i32, ptr)

declare void @io.__internal_print(ptr, ptr, ptr)

declare void @io.vsprint(ptr, ptr, ptr)

declare void @io.sprint(ptr, ptr, ptr)

declare void @io.print(ptr, ptr)

declare void @io.println(ptr, ptr)

declare void @io.readln(ptr, ptr, i32)

declare i32 @io.get_next(ptr)

declare void @"io.format_float:(type,*[]u32,f32,i32)->void"(i64, ptr, float, i32)

declare void @"io.format_float:(type,*[]u32,f64,i32)->void"(i64, ptr, double, i32)

declare ptr @mem.generic_alloc(i64, ptr)

declare void @mem.generic_free(ptr, ptr)

declare void @mem.create_generic_allocator(ptr)

declare ptr @mem.arena_alloc(i64, ptr)

declare void @mem.no_free(ptr, ptr)

declare void @mem.create_scratch(ptr, i64)

declare void @mem.destroy_scratch(ptr)

declare ptr @memcpy(ptr, ptr, i64)

declare ptr @memset(ptr, i32, i64)

declare void @"mem.make_slice:(type,int,*mem.Allocator)->[][]main.Tile"(ptr, i64, i64, ptr)

declare void @"mem.make_slice:(type,int,*mem.Allocator)->[]main.Tile"(ptr, i64, i64, ptr)

declare void @"mem.make_slice:(type,int,*mem.Allocator)->[]u8"(ptr, i64, i64, ptr)

define i64 @str.to_int(ptr %0) !dbg !79 {
block_0:
  %1 = alloca %string, align 8
  %2 = alloca i1, align 1
  %3 = alloca i64, align 8
  %4 = alloca ptr, align 8
  %5 = alloca i64, align 8
  %6 = alloca i32, align 4
  %7 = alloca i64, align 8
  %8 = alloca i64, align 8
  call void @llvm.memcpy.p0.p0.i64(ptr align 8 %1, ptr align 8 %0, i64 16, i1 false), !dbg !90
  call void @llvm.dbg.value(metadata ptr %1, metadata !91, metadata !DIExpression()), !dbg !90
  store i1 false, ptr %2, align 1, !dbg !92
  call void @llvm.dbg.declare(metadata ptr %2, metadata !93, metadata !DIExpression()), !dbg !92
  store i64 0, ptr %3, align 8, !dbg !95
  call void @llvm.dbg.declare(metadata ptr %3, metadata !96, metadata !DIExpression()), !dbg !95
  %9 = getelementptr inbounds %string, ptr %1, i32 0, i32 1, !dbg !97
  %10 = load i64, ptr %9, align 8, !dbg !97
  %11 = getelementptr inbounds %string, ptr %1, i32 0, i32 0, !dbg !97
  %12 = load ptr, ptr %11, align 8, !dbg !97
  store ptr %12, ptr %4, align 8, !dbg !97
  store i64 0, ptr %5, align 8, !dbg !97
  br label %block_1, !dbg !97

block_1:                                          ; preds = %block_3, %block_0
  %13 = load i64, ptr %5, align 8, !dbg !97
  %14 = icmp ult i64 %13, %10, !dbg !97
  br i1 %14, label %block_2, label %block_4, !dbg !97

block_2:                                          ; preds = %block_1
  %15 = load ptr, ptr %4, align 8, !dbg !97
  %16 = call i32 @str.deref(ptr %15), !dbg !97
  store i32 %16, ptr %6, align 4, !dbg !97
  call void @llvm.dbg.declare(metadata ptr %6, metadata !98, metadata !DIExpression()), !dbg !97
  call void @llvm.dbg.declare(metadata ptr %5, metadata !100, metadata !DIExpression()), !dbg !97
  %17 = load i32, ptr %6, align 4, !dbg !101
  %18 = icmp eq i32 %17, 45, !dbg !101
  br i1 %18, label %block_5, label %block_6, !dbg !101

block_5:                                          ; preds = %block_2
  %19 = load i1, ptr %2, align 1, !dbg !102
  br i1 %19, label %block_8, label %block_9, !dbg !102

block_8:                                          ; preds = %block_5
  ret i64 0, !dbg !102

block_9:                                          ; preds = %block_5
  br label %block_10, !dbg !102

block_10:                                         ; preds = %block_9
  store i1 true, ptr %2, align 1, !dbg !103
  br label %block_3, !dbg !104

block_6:                                          ; preds = %block_2
  br label %block_7, !dbg !104

block_7:                                          ; preds = %block_6
  %20 = load i64, ptr %3, align 8, !dbg !105
  %21 = mul i64 %20, 10, !dbg !105
  store i64 %21, ptr %3, align 8, !dbg !105
  %22 = load i32, ptr %6, align 4, !dbg !106
  switch i32 %22, label %block_11 [
    i32 48, label %block_12
    i32 49, label %block_13
    i32 50, label %block_14
    i32 51, label %block_15
    i32 52, label %block_16
    i32 53, label %block_17
    i32 54, label %block_18
    i32 55, label %block_19
    i32 56, label %block_20
    i32 57, label %block_21
  ], !dbg !106

block_12:                                         ; preds = %block_7
  store i64 0, ptr %7, align 8, !dbg !106
  br label %block_11, !dbg !106

block_13:                                         ; preds = %block_7
  store i64 1, ptr %7, align 8, !dbg !106
  br label %block_11, !dbg !106

block_14:                                         ; preds = %block_7
  store i64 2, ptr %7, align 8, !dbg !106
  br label %block_11, !dbg !106

block_15:                                         ; preds = %block_7
  store i64 3, ptr %7, align 8, !dbg !106
  br label %block_11, !dbg !106

block_16:                                         ; preds = %block_7
  store i64 4, ptr %7, align 8, !dbg !106
  br label %block_11, !dbg !106

block_17:                                         ; preds = %block_7
  store i64 5, ptr %7, align 8, !dbg !106
  br label %block_11, !dbg !106

block_18:                                         ; preds = %block_7
  store i64 6, ptr %7, align 8, !dbg !106
  br label %block_11, !dbg !106

block_19:                                         ; preds = %block_7
  store i64 7, ptr %7, align 8, !dbg !106
  br label %block_11, !dbg !106

block_20:                                         ; preds = %block_7
  store i64 8, ptr %7, align 8, !dbg !106
  br label %block_11, !dbg !106

block_21:                                         ; preds = %block_7
  store i64 9, ptr %7, align 8, !dbg !106
  br label %block_11, !dbg !106

block_11:                                         ; preds = %block_21, %block_20, %block_19, %block_18, %block_17, %block_16, %block_15, %block_14, %block_13, %block_12, %block_7
  %23 = load i32, ptr %7, align 4, !dbg !106
  store i32 %23, ptr %8, align 4, !dbg !106
  call void @llvm.dbg.declare(metadata ptr %8, metadata !107, metadata !DIExpression()), !dbg !106
  %24 = load i64, ptr %3, align 8, !dbg !108
  %25 = load i64, ptr %8, align 8, !dbg !108
  %26 = add i64 %24, %25, !dbg !108
  store i64 %26, ptr %3, align 8, !dbg !108
  br label %block_3, !dbg !108

block_3:                                          ; preds = %block_11, %block_10
  %27 = load i64, ptr %5, align 8, !dbg !108
  %28 = add i64 %27, 1, !dbg !108
  store i64 %28, ptr %5, align 8, !dbg !108
  %29 = load ptr, ptr %4, align 8, !dbg !108
  %30 = call ptr @str._it_advance(ptr %29, i64 %10, i64 %27), !dbg !108
  store ptr %30, ptr %4, align 8, !dbg !108
  br label %block_1, !dbg !108

block_4:                                          ; preds = %block_1
  %31 = load i1, ptr %2, align 1, !dbg !109
  br i1 %31, label %block_22, label %block_23, !dbg !109

block_22:                                         ; preds = %block_4
  %32 = load i64, ptr %3, align 8, !dbg !109
  %33 = sub i64 0, %32, !dbg !109
  store i64 %33, ptr %3, align 8, !dbg !109
  br label %block_24, !dbg !109

block_23:                                         ; preds = %block_4
  br label %block_24, !dbg !109

block_24:                                         ; preds = %block_23, %block_22
  %34 = load i64, ptr %3, align 8, !dbg !110
  ret i64 %34, !dbg !110
}

define void @str.create(ptr %0, ptr %1) !dbg !111 {
block_0:
  %2 = alloca ptr, align 8
  %3 = alloca %str.Builder, align 8
  %4 = alloca %slice.3, align 8
  store ptr %1, ptr %2, align 8, !dbg !124
  call void @llvm.dbg.value(metadata ptr %2, metadata !125, metadata !DIExpression()), !dbg !124
  %5 = load ptr, ptr %2, align 8, !dbg !126
  call void @"array.create:(type,*mem.Allocator)->[]u32"(ptr %4, i64 4, ptr %5), !dbg !126
  %6 = getelementptr inbounds %str.Builder, ptr %3, i32 0, i32 0, !dbg !126
  call void @llvm.memcpy.p0.p0.i64(ptr align 8 %6, ptr align 8 %4, i64 16, i1 false), !dbg !126
  call void @llvm.memcpy.p0.p0.i64(ptr align 8 %0, ptr align 8 %3, i64 16, i1 false), !dbg !126
  ret void, !dbg !126
}

define void @str.append(ptr %0, ptr %1) !dbg !127 {
block_0:
  %2 = alloca ptr, align 8
  %3 = alloca %string, align 8
  %4 = alloca ptr, align 8
  %5 = alloca ptr, align 8
  %6 = alloca i64, align 8
  %7 = alloca i32, align 4
  store ptr %0, ptr %2, align 8, !dbg !131
  call void @llvm.dbg.value(metadata ptr %2, metadata !132, metadata !DIExpression()), !dbg !131
  call void @llvm.memcpy.p0.p0.i64(ptr align 8 %3, ptr align 8 %1, i64 16, i1 false), !dbg !131
  call void @llvm.dbg.value(metadata ptr %3, metadata !133, metadata !DIExpression()), !dbg !131
  %8 = load ptr, ptr %2, align 8, !dbg !134
  store ptr %8, ptr %4, align 8, !dbg !134
  call void @llvm.dbg.declare(metadata ptr %4, metadata !135, metadata !DIExpression()), !dbg !134
  %9 = getelementptr inbounds %string, ptr %3, i32 0, i32 1, !dbg !136
  %10 = load i64, ptr %9, align 8, !dbg !136
  %11 = getelementptr inbounds %string, ptr %3, i32 0, i32 0, !dbg !136
  %12 = load ptr, ptr %11, align 8, !dbg !136
  store ptr %12, ptr %5, align 8, !dbg !136
  store i64 0, ptr %6, align 8, !dbg !136
  br label %block_1, !dbg !136

block_1:                                          ; preds = %block_3, %block_0
  %13 = load i64, ptr %6, align 8, !dbg !136
  %14 = icmp ult i64 %13, %10, !dbg !136
  br i1 %14, label %block_2, label %block_4, !dbg !136

block_2:                                          ; preds = %block_1
  %15 = load ptr, ptr %5, align 8, !dbg !136
  %16 = call i32 @str.deref(ptr %15), !dbg !136
  store i32 %16, ptr %7, align 4, !dbg !136
  call void @llvm.dbg.declare(metadata ptr %7, metadata !137, metadata !DIExpression()), !dbg !136
  call void @llvm.dbg.declare(metadata ptr %6, metadata !138, metadata !DIExpression()), !dbg !136
  %17 = load ptr, ptr %4, align 8, !dbg !139
  %18 = getelementptr inbounds %str.Builder, ptr %17, i32 0, i32 0, !dbg !139
  %19 = load i32, ptr %7, align 4, !dbg !139
  call void @"array.add:(*[]u32,u32)->void"(ptr %18, i32 %19), !dbg !139
  br label %block_3, !dbg !139

block_3:                                          ; preds = %block_2
  %20 = load i64, ptr %6, align 8, !dbg !139
  %21 = add i64 %20, 1, !dbg !139
  store i64 %21, ptr %6, align 8, !dbg !139
  %22 = load ptr, ptr %5, align 8, !dbg !139
  %23 = call ptr @str._it_advance(ptr %22, i64 %10, i64 %20), !dbg !139
  store ptr %23, ptr %5, align 8, !dbg !139
  br label %block_1, !dbg !139

block_4:                                          ; preds = %block_1
  ret void, !dbg !140
}

define void @str.append_u32(ptr %0, i32 %1) !dbg !141 {
block_0:
  %2 = alloca ptr, align 8
  %3 = alloca i32, align 4
  %4 = alloca ptr, align 8
  store ptr %0, ptr %2, align 8, !dbg !144
  call void @llvm.dbg.value(metadata ptr %2, metadata !145, metadata !DIExpression()), !dbg !144
  store i32 %1, ptr %3, align 4, !dbg !144
  call void @llvm.dbg.value(metadata ptr %3, metadata !146, metadata !DIExpression()), !dbg !144
  %5 = load ptr, ptr %2, align 8, !dbg !147
  store ptr %5, ptr %4, align 8, !dbg !147
  call void @llvm.dbg.declare(metadata ptr %4, metadata !148, metadata !DIExpression()), !dbg !147
  %6 = load ptr, ptr %4, align 8, !dbg !149
  %7 = getelementptr inbounds %str.Builder, ptr %6, i32 0, i32 0, !dbg !149
  %8 = load i32, ptr %3, align 4, !dbg !149
  call void @"array.add:(*[]u32,u32)->void"(ptr %7, i32 %8), !dbg !149
  ret void, !dbg !150
}

define void @str.append_u8(ptr %0, i8 %1) !dbg !151 {
block_0:
  %2 = alloca ptr, align 8
  %3 = alloca i8, align 1
  %4 = alloca ptr, align 8
  store ptr %0, ptr %2, align 8, !dbg !154
  call void @llvm.dbg.value(metadata ptr %2, metadata !155, metadata !DIExpression()), !dbg !154
  store i8 %1, ptr %3, align 1, !dbg !154
  call void @llvm.dbg.value(metadata ptr %3, metadata !156, metadata !DIExpression()), !dbg !154
  %5 = load ptr, ptr %2, align 8, !dbg !157
  store ptr %5, ptr %4, align 8, !dbg !157
  call void @llvm.dbg.declare(metadata ptr %4, metadata !158, metadata !DIExpression()), !dbg !157
  %6 = load ptr, ptr %4, align 8, !dbg !159
  %7 = getelementptr inbounds %str.Builder, ptr %6, i32 0, i32 0, !dbg !159
  %8 = load i8, ptr %3, align 1, !dbg !159
  %9 = zext i8 %8 to i32, !dbg !159
  call void @"array.add:(*[]u32,u32)->void"(ptr %7, i32 %9), !dbg !159
  ret void, !dbg !160
}

define void @str.from_builder(ptr %0, ptr %1, ptr %2) !dbg !161 {
block_0:
  %3 = alloca ptr, align 8
  %4 = alloca ptr, align 8
  %5 = alloca %slice.7, align 8
  %6 = alloca %slice.7, align 8
  %7 = alloca i64, align 8
  %8 = alloca ptr, align 8
  %9 = alloca i64, align 8
  %10 = alloca %string, align 8
  store ptr %1, ptr %3, align 8, !dbg !164
  call void @llvm.dbg.value(metadata ptr %3, metadata !165, metadata !DIExpression()), !dbg !164
  store ptr %2, ptr %4, align 8, !dbg !164
  call void @llvm.dbg.value(metadata ptr %4, metadata !166, metadata !DIExpression()), !dbg !164
  %11 = load ptr, ptr %3, align 8, !dbg !167
  %12 = getelementptr inbounds %str.Builder, ptr %11, i32 0, i32 0, !dbg !167
  %13 = getelementptr inbounds %slice.3, ptr %12, i32 0, i32 0, !dbg !167
  %14 = load i64, ptr %13, align 8, !dbg !167
  %15 = mul i64 %14, 4, !dbg !167
  %16 = load ptr, ptr %4, align 8, !dbg !167
  call void @"mem.make_slice:(type,int,*mem.Allocator)->[]u8"(ptr %5, i64 2, i64 %15, ptr %16), !dbg !167
  call void @llvm.memcpy.p0.p0.i64(ptr align 8 %6, ptr align 8 %5, i64 16, i1 false), !dbg !167
  call void @llvm.dbg.declare(metadata ptr %6, metadata !168, metadata !DIExpression()), !dbg !167
  store i64 0, ptr %7, align 8, !dbg !172
  call void @llvm.dbg.declare(metadata ptr %7, metadata !173, metadata !DIExpression()), !dbg !172
  %17 = load ptr, ptr %3, align 8, !dbg !174
  %18 = getelementptr inbounds %str.Builder, ptr %17, i32 0, i32 0, !dbg !174
  %19 = getelementptr inbounds %slice.3, ptr %18, i32 0, i32 1, !dbg !174
  %20 = load ptr, ptr %19, align 8, !dbg !174
  store ptr %20, ptr %8, align 8, !dbg !174
  call void @llvm.dbg.declare(metadata ptr %8, metadata !175, metadata !DIExpression()), !dbg !174
  store i64 0, ptr %9, align 8, !dbg !176
  call void @llvm.dbg.declare(metadata ptr %9, metadata !177, metadata !DIExpression()), !dbg !176
  br label %block_1, !dbg !176

block_1:                                          ; preds = %block_3, %block_0
  %21 = load i64, ptr %9, align 8, !dbg !176
  %22 = load ptr, ptr %3, align 8, !dbg !176
  %23 = getelementptr inbounds %str.Builder, ptr %22, i32 0, i32 0, !dbg !176
  %24 = getelementptr inbounds %slice.3, ptr %23, i32 0, i32 0, !dbg !176
  %25 = load i64, ptr %24, align 8, !dbg !176
  %26 = mul i64 %25, 4, !dbg !176
  %27 = icmp slt i64 %21, %26, !dbg !176
  br i1 %27, label %block_2, label %block_4, !dbg !176

block_2:                                          ; preds = %block_1
  %28 = load ptr, ptr %8, align 8, !dbg !178
  %29 = load i64, ptr %9, align 8, !dbg !178
  %30 = getelementptr i8, ptr %28, i64 %29, !dbg !178
  %31 = load i8, ptr %30, align 1, !dbg !178
  %32 = icmp eq i8 %31, 0, !dbg !178
  br i1 %32, label %block_5, label %block_6, !dbg !178

block_5:                                          ; preds = %block_2
  br label %block_3, !dbg !178

block_6:                                          ; preds = %block_2
  br label %block_7, !dbg !178

block_7:                                          ; preds = %block_6
  %33 = load i64, ptr %7, align 8, !dbg !179
  %34 = getelementptr inbounds %slice.7, ptr %6, i32 0, i32 1, !dbg !179
  %35 = load ptr, ptr %34, align 8, !dbg !179
  %36 = getelementptr i8, ptr %35, i64 %33, !dbg !179
  %37 = load ptr, ptr %8, align 8, !dbg !179
  %38 = load i64, ptr %9, align 8, !dbg !179
  %39 = getelementptr i8, ptr %37, i64 %38, !dbg !179
  %40 = load i8, ptr %39, align 1, !dbg !179
  store i8 %40, ptr %36, align 1, !dbg !179
  %41 = load i64, ptr %7, align 8, !dbg !180
  %42 = add i64 %41, 1, !dbg !180
  store i64 %42, ptr %7, align 8, !dbg !180
  br label %block_3, !dbg !180

block_3:                                          ; preds = %block_7, %block_5
  %43 = load i64, ptr %9, align 8, !dbg !180
  %44 = add i64 %43, 1, !dbg !180
  store i64 %44, ptr %9, align 8, !dbg !180
  %45 = load i64, ptr %9, align 8, !dbg !180
  br label %block_1, !dbg !180

block_4:                                          ; preds = %block_1
  %46 = getelementptr inbounds %slice.7, ptr %6, i32 0, i32 1, !dbg !181
  %47 = load ptr, ptr %46, align 8, !dbg !181
  %48 = getelementptr i8, ptr %47, i64 0, !dbg !181
  %49 = getelementptr inbounds %string, ptr %10, i32 0, i32 0, !dbg !181
  store ptr %48, ptr %49, align 8, !dbg !181
  %50 = load i64, ptr %7, align 8, !dbg !181
  %51 = getelementptr inbounds %string, ptr %10, i32 0, i32 1, !dbg !181
  store i64 %50, ptr %51, align 8, !dbg !181
  call void @llvm.memcpy.p0.p0.i64(ptr align 8 %0, ptr align 8 %10, i64 16, i1 false), !dbg !181
  ret void, !dbg !181
}

define void @str.substr(ptr %0, ptr %1, i64 %2, i64 %3) !dbg !182 {
block_0:
  %4 = alloca %string, align 8
  %5 = alloca i64, align 8
  %6 = alloca i64, align 8
  %7 = alloca %string, align 8
  %8 = alloca %string, align 8
  call void @llvm.memcpy.p0.p0.i64(ptr align 8 %4, ptr align 8 %1, i64 16, i1 false), !dbg !185
  call void @llvm.dbg.value(metadata ptr %4, metadata !186, metadata !DIExpression()), !dbg !185
  store i64 %2, ptr %5, align 8, !dbg !185
  call void @llvm.dbg.value(metadata ptr %5, metadata !187, metadata !DIExpression()), !dbg !185
  store i64 %3, ptr %6, align 8, !dbg !185
  call void @llvm.dbg.value(metadata ptr %6, metadata !188, metadata !DIExpression()), !dbg !185
  call void @llvm.memcpy.p0.p0.i64(ptr align 8 %7, ptr align 8 %4, i64 16, i1 false), !dbg !189
  call void @llvm.dbg.declare(metadata ptr %7, metadata !190, metadata !DIExpression()), !dbg !189
  call void @llvm.memset.p0.i64(ptr align 8 %8, i8 0, i64 16, i1 false), !dbg !191
  call void @llvm.dbg.declare(metadata ptr %8, metadata !192, metadata !DIExpression()), !dbg !191
  %9 = getelementptr inbounds %string, ptr %8, i32 0, i32 0, !dbg !193
  %10 = getelementptr inbounds %string, ptr %7, i32 0, i32 0, !dbg !193
  %11 = load ptr, ptr %10, align 8, !dbg !193
  %12 = load i64, ptr %5, align 8, !dbg !193
  %13 = getelementptr i8, ptr %11, i64 %12, !dbg !193
  store ptr %13, ptr %9, align 8, !dbg !193
  %14 = getelementptr inbounds %string, ptr %8, i32 0, i32 1, !dbg !194
  %15 = load i64, ptr %6, align 8, !dbg !194
  %16 = load i64, ptr %5, align 8, !dbg !194
  %17 = sub i64 %15, %16, !dbg !194
  store i64 %17, ptr %14, align 8, !dbg !194
  call void @llvm.memcpy.p0.p0.i64(ptr align 8 %0, ptr align 8 %8, i64 16, i1 false), !dbg !195
  ret void, !dbg !195
}

define i64 @str.get_codepoint_size(ptr %0) !dbg !196 {
block_0:
  %1 = alloca ptr, align 8
  %2 = alloca ptr, align 8
  %3 = alloca i64, align 8
  %4 = alloca i64, align 8
  store ptr %0, ptr %1, align 8, !dbg !199
  call void @llvm.dbg.value(metadata ptr %1, metadata !200, metadata !DIExpression()), !dbg !199
  %5 = load ptr, ptr %1, align 8, !dbg !201
  store ptr %5, ptr %2, align 8, !dbg !201
  call void @llvm.dbg.declare(metadata ptr %2, metadata !202, metadata !DIExpression()), !dbg !201
  %6 = load ptr, ptr %2, align 8, !dbg !203
  %7 = load i8, ptr %6, align 1, !dbg !203
  %8 = load i8, ptr @str.CONTINUE_BIT, align 1, !dbg !203
  %9 = and i8 %7, %8, !dbg !203
  %10 = icmp eq i8 %9, 0, !dbg !203
  br i1 %10, label %block_1, label %block_2, !dbg !203

block_1:                                          ; preds = %block_0
  ret i64 1, !dbg !204

block_2:                                          ; preds = %block_0
  br label %block_3, !dbg !204

block_3:                                          ; preds = %block_2
  store i64 1, ptr %3, align 8, !dbg !205
  call void @llvm.dbg.declare(metadata ptr %3, metadata !206, metadata !DIExpression()), !dbg !205
  store i64 1, ptr %4, align 8, !dbg !207
  call void @llvm.dbg.declare(metadata ptr %4, metadata !208, metadata !DIExpression()), !dbg !207
  br label %block_4, !dbg !207

block_4:                                          ; preds = %block_6, %block_3
  %11 = load ptr, ptr %2, align 8, !dbg !207
  %12 = load i8, ptr %11, align 1, !dbg !207
  %13 = zext i8 %12 to i32, !dbg !207
  %14 = load i8, ptr @str.CONTINUE_BIT, align 1, !dbg !207
  %15 = zext i8 %14 to i32, !dbg !207
  %16 = load i64, ptr %4, align 8, !dbg !207
  %17 = trunc i64 %16 to i32, !dbg !207
  %18 = lshr i32 %15, %17, !dbg !207
  %19 = and i32 %13, %18, !dbg !207
  %20 = icmp ne i32 %19, 0, !dbg !207
  br i1 %20, label %block_5, label %block_7, !dbg !207

block_5:                                          ; preds = %block_4
  %21 = load i64, ptr %3, align 8, !dbg !209
  %22 = add i64 %21, 1, !dbg !209
  store i64 %22, ptr %3, align 8, !dbg !209
  br label %block_6, !dbg !209

block_6:                                          ; preds = %block_5
  %23 = load i64, ptr %4, align 8, !dbg !209
  %24 = add i64 %23, 1, !dbg !209
  store i64 %24, ptr %4, align 8, !dbg !209
  %25 = load i64, ptr %4, align 8, !dbg !209
  br label %block_4, !dbg !209

block_7:                                          ; preds = %block_4
  %26 = load i64, ptr %3, align 8, !dbg !210
  ret i64 %26, !dbg !210
}

define ptr @str.advance(ptr %0) !dbg !211 {
block_0:
  %1 = alloca ptr, align 8
  %2 = alloca i64, align 8
  %3 = alloca ptr, align 8
  store ptr %0, ptr %1, align 8, !dbg !214
  call void @llvm.dbg.value(metadata ptr %1, metadata !215, metadata !DIExpression()), !dbg !214
  %4 = load ptr, ptr %1, align 8, !dbg !216
  %5 = call i64 @str.get_codepoint_size(ptr %4), !dbg !216
  store i64 %5, ptr %2, align 8, !dbg !216
  call void @llvm.dbg.declare(metadata ptr %2, metadata !217, metadata !DIExpression()), !dbg !216
  %6 = load ptr, ptr %1, align 8, !dbg !218
  store ptr %6, ptr %3, align 8, !dbg !218
  call void @llvm.dbg.declare(metadata ptr %3, metadata !219, metadata !DIExpression()), !dbg !218
  %7 = load ptr, ptr %3, align 8, !dbg !220
  %8 = load i64, ptr %2, align 8, !dbg !220
  %9 = getelementptr i8, ptr %7, i64 %8, !dbg !220
  ret ptr %9, !dbg !220
}

define ptr @str._it_advance(ptr %0, i64 %1, i64 %2) !dbg !221 {
block_0:
  %3 = alloca ptr, align 8
  %4 = alloca i64, align 8
  %5 = alloca i64, align 8
  store ptr %0, ptr %3, align 8, !dbg !225
  call void @llvm.dbg.value(metadata ptr %3, metadata !226, metadata !DIExpression()), !dbg !225
  store i64 %1, ptr %4, align 8, !dbg !225
  call void @llvm.dbg.value(metadata ptr %4, metadata !227, metadata !DIExpression()), !dbg !225
  store i64 %2, ptr %5, align 8, !dbg !225
  call void @llvm.dbg.value(metadata ptr %5, metadata !228, metadata !DIExpression()), !dbg !225
  %6 = load i64, ptr %5, align 8, !dbg !229
  %7 = add i64 %6, 1, !dbg !229
  %8 = load i64, ptr %4, align 8, !dbg !229
  %9 = icmp eq i64 %7, %8, !dbg !229
  %10 = load i64, ptr %5, align 8, !dbg !229
  %11 = load i64, ptr %4, align 8, !dbg !229
  %12 = icmp sge i64 %10, %11, !dbg !229
  %13 = icmp ne i1 %9, false, !dbg !229
  %14 = icmp ne i1 %12, false, !dbg !229
  %15 = or i1 %13, %14, !dbg !229
  br i1 %15, label %block_1, label %block_2, !dbg !229

block_1:                                          ; preds = %block_0
  ret ptr null, !dbg !230

block_2:                                          ; preds = %block_0
  br label %block_3, !dbg !230

block_3:                                          ; preds = %block_2
  %16 = load ptr, ptr %3, align 8, !dbg !231
  %17 = call ptr @str.advance(ptr %16), !dbg !231
  ret ptr %17, !dbg !231
}

define i32 @str.deref(ptr %0) !dbg !232 {
block_0:
  %1 = alloca ptr, align 8
  %2 = alloca ptr, align 8
  %3 = alloca i64, align 8
  %4 = alloca i32, align 4
  %5 = alloca i64, align 8
  store ptr %0, ptr %1, align 8, !dbg !235
  call void @llvm.dbg.value(metadata ptr %1, metadata !236, metadata !DIExpression()), !dbg !235
  %6 = load ptr, ptr %1, align 8, !dbg !237
  store ptr %6, ptr %2, align 8, !dbg !237
  call void @llvm.dbg.declare(metadata ptr %2, metadata !238, metadata !DIExpression()), !dbg !237
  %7 = load ptr, ptr %2, align 8, !dbg !239
  %8 = call i64 @str.get_codepoint_size(ptr %7), !dbg !239
  store i64 %8, ptr %3, align 8, !dbg !239
  call void @llvm.dbg.declare(metadata ptr %3, metadata !240, metadata !DIExpression()), !dbg !239
  store i32 0, ptr %4, align 4, !dbg !241
  call void @llvm.dbg.declare(metadata ptr %4, metadata !242, metadata !DIExpression()), !dbg !241
  %9 = load i64, ptr %3, align 8, !dbg !243
  store i64 0, ptr %5, align 8, !dbg !243
  br label %block_1, !dbg !243

block_1:                                          ; preds = %block_3, %block_0
  %10 = load i64, ptr %5, align 8, !dbg !243
  %11 = icmp ult i64 %10, %9, !dbg !243
  br i1 %11, label %block_2, label %block_4, !dbg !243

block_2:                                          ; preds = %block_1
  call void @llvm.dbg.declare(metadata ptr %5, metadata !244, metadata !DIExpression()), !dbg !243
  %12 = load i32, ptr %4, align 4, !dbg !245
  %13 = shl i32 %12, 8, !dbg !245
  store i32 %13, ptr %4, align 4, !dbg !245
  %14 = load i32, ptr %4, align 4, !dbg !246
  %15 = load ptr, ptr %2, align 8, !dbg !246
  %16 = load i64, ptr %5, align 8, !dbg !246
  %17 = getelementptr i8, ptr %15, i64 %16, !dbg !246
  %18 = load i8, ptr %17, align 1, !dbg !246
  %19 = zext i8 %18 to i32, !dbg !246
  %20 = or i32 %14, %19, !dbg !246
  store i32 %20, ptr %4, align 4, !dbg !246
  br label %block_3, !dbg !246

block_3:                                          ; preds = %block_2
  %21 = load i64, ptr %5, align 8, !dbg !246
  %22 = add i64 %21, 1, !dbg !246
  store i64 %22, ptr %5, align 8, !dbg !246
  br label %block_1, !dbg !246

block_4:                                          ; preds = %block_1
  %23 = load i32, ptr %4, align 4, !dbg !247
  ret i32 %23, !dbg !247
}

define i32 @str.index(ptr %0, i64 %1) !dbg !248 {
block_0:
  %2 = alloca %string, align 8
  %3 = alloca i64, align 8
  %4 = alloca ptr, align 8
  %5 = alloca i64, align 8
  call void @llvm.memcpy.p0.p0.i64(ptr align 8 %2, ptr align 8 %0, i64 16, i1 false), !dbg !251
  call void @llvm.dbg.value(metadata ptr %2, metadata !252, metadata !DIExpression()), !dbg !251
  store i64 %1, ptr %3, align 8, !dbg !251
  call void @llvm.dbg.value(metadata ptr %3, metadata !253, metadata !DIExpression()), !dbg !251
  %6 = load i64, ptr %3, align 8, !dbg !254
  %7 = getelementptr inbounds %string, ptr %2, i32 0, i32 1, !dbg !254
  %8 = load i64, ptr %7, align 8, !dbg !254
  %9 = icmp sge i64 %6, %8, !dbg !254
  br i1 %9, label %block_1, label %block_2, !dbg !254

block_1:                                          ; preds = %block_0
  ret i32 0, !dbg !255

block_2:                                          ; preds = %block_0
  br label %block_3, !dbg !255

block_3:                                          ; preds = %block_2
  %10 = getelementptr inbounds %string, ptr %2, i32 0, i32 0, !dbg !256
  %11 = load ptr, ptr %10, align 8, !dbg !256
  store ptr %11, ptr %4, align 8, !dbg !256
  call void @llvm.dbg.declare(metadata ptr %4, metadata !257, metadata !DIExpression()), !dbg !256
  %12 = load i64, ptr %3, align 8, !dbg !258
  store i64 0, ptr %5, align 8, !dbg !258
  br label %block_4, !dbg !258

block_4:                                          ; preds = %block_6, %block_3
  %13 = load i64, ptr %5, align 8, !dbg !258
  %14 = icmp ult i64 %13, %12, !dbg !258
  br i1 %14, label %block_5, label %block_7, !dbg !258

block_5:                                          ; preds = %block_4
  call void @llvm.dbg.declare(metadata ptr %5, metadata !259, metadata !DIExpression()), !dbg !258
  %15 = load ptr, ptr %4, align 8, !dbg !260
  %16 = call ptr @str.advance(ptr %15), !dbg !260
  store ptr %16, ptr %4, align 8, !dbg !260
  br label %block_6, !dbg !260

block_6:                                          ; preds = %block_5
  %17 = load i64, ptr %5, align 8, !dbg !260
  %18 = add i64 %17, 1, !dbg !260
  store i64 %18, ptr %5, align 8, !dbg !260
  br label %block_4, !dbg !260

block_7:                                          ; preds = %block_4
  %19 = load ptr, ptr %4, align 8, !dbg !261
  %20 = call i32 @str.deref(ptr %19), !dbg !261
  ret i32 %20, !dbg !261
}

declare void @"array.add:(*[]u32,u32)->void"(ptr, i32)

declare void @"array.create:(type,*mem.Allocator)->[]u8"(ptr, i64, ptr)

declare void @"array.add:(*[]u8,u8)->void"(ptr, i8)

declare void @"array.create:(type,*mem.Allocator)->[]u32"(ptr, i64, ptr)

declare void @"array.free:(*[]u32)->void"(ptr)

declare void @"array.free:(*[]u8)->void"(ptr)

; Function Attrs: nocallback nofree nounwind willreturn memory(argmem: readwrite)
declare void @llvm.memcpy.p0.p0.i64(ptr noalias nocapture writeonly, ptr noalias nocapture readonly, i64, i1 immarg) #0

; Function Attrs: nocallback nofree nosync nounwind speculatable willreturn memory(none)
declare void @llvm.dbg.value(metadata, metadata, metadata) #1

; Function Attrs: nocallback nofree nosync nounwind speculatable willreturn memory(none)
declare void @llvm.dbg.declare(metadata, metadata, metadata) #1

; Function Attrs: nocallback nofree nounwind willreturn memory(argmem: write)
declare void @llvm.memset.p0.i64(ptr nocapture writeonly, i8, i64, i1 immarg) #2

attributes #0 = { nocallback nofree nounwind willreturn memory(argmem: readwrite) }
attributes #1 = { nocallback nofree nosync nounwind speculatable willreturn memory(none) }
attributes #2 = { nocallback nofree nounwind willreturn memory(argmem: write) }

!llvm.dbg.cu = !{!0}
!llvm.module.flags = !{!77, !78}

!0 = distinct !DICompileUnit(language: DW_LANG_C99, file: !1, producer: "RCP Compiler", isOptimized: false, runtimeVersion: 0, emissionKind: FullDebug, enums: !2, splitDebugInlining: false)
!1 = !DIFile(filename: "strings.rcp", directory: "E:\\C_Projects\\ReComp\\std")
!2 = !{!3, !15, !36, !45, !50, !54, !65, !71}
!3 = !DICompositeType(tag: DW_TAG_enumeration_type, name: "init.TypeKind", scope: !1, file: !1, size: 64, align: 64, elements: !4)
!4 = !{!5, !6, !7, !8, !9, !10, !11, !12, !13, !14}
!5 = !DIEnumerator(name: "Invalid", value: 0, isUnsigned: true)
!6 = !DIEnumerator(name: "Basic", value: 1, isUnsigned: true)
!7 = !DIEnumerator(name: "Function", value: 2, isUnsigned: true)
!8 = !DIEnumerator(name: "Struct", value: 3, isUnsigned: true)
!9 = !DIEnumerator(name: "Pointer", value: 4, isUnsigned: true)
!10 = !DIEnumerator(name: "Array", value: 5, isUnsigned: true)
!11 = !DIEnumerator(name: "Slice", value: 6, isUnsigned: true)
!12 = !DIEnumerator(name: "Vector", value: 7, isUnsigned: true)
!13 = !DIEnumerator(name: "Enum", value: 8, isUnsigned: true)
!14 = !DIEnumerator(name: "Generic", value: 9, isUnsigned: true)
!15 = !DICompositeType(tag: DW_TAG_enumeration_type, name: "init.BasicKind", scope: !1, file: !1, size: 64, align: 64, elements: !16)
!16 = !{!17, !18, !19, !20, !21, !22, !23, !24, !25, !26, !27, !28, !29, !30, !31, !32, !33, !34, !35}
!17 = !DIEnumerator(name: "Bool", value: 0, isUnsigned: true)
!18 = !DIEnumerator(name: "String", value: 1, isUnsigned: true)
!19 = !DIEnumerator(name: "U8", value: 2, isUnsigned: true)
!20 = !DIEnumerator(name: "U16", value: 3, isUnsigned: true)
!21 = !DIEnumerator(name: "U32", value: 4, isUnsigned: true)
!22 = !DIEnumerator(name: "U64", value: 5, isUnsigned: true)
!23 = !DIEnumerator(name: "I8", value: 6, isUnsigned: true)
!24 = !DIEnumerator(name: "I16", value: 7, isUnsigned: true)
!25 = !DIEnumerator(name: "I32", value: 8, isUnsigned: true)
!26 = !DIEnumerator(name: "I64", value: 9, isUnsigned: true)
!27 = !DIEnumerator(name: "F32", value: 10, isUnsigned: true)
!28 = !DIEnumerator(name: "F64", value: 11, isUnsigned: true)
!29 = !DIEnumerator(name: "untypedInteger", value: 12, isUnsigned: true)
!30 = !DIEnumerator(name: "untypedFloat", value: 13, isUnsigned: true)
!31 = !DIEnumerator(name: "Int", value: 14, isUnsigned: true)
!32 = !DIEnumerator(name: "Uint", value: 15, isUnsigned: true)
!33 = !DIEnumerator(name: "Type", value: 16, isUnsigned: true)
!34 = !DIEnumerator(name: "Auto", value: 17, isUnsigned: true)
!35 = !DIEnumerator(name: "Module", value: 18, isUnsigned: true)
!36 = !DICompositeType(tag: DW_TAG_enumeration_type, name: "init.BasicFlag", scope: !1, file: !1, size: 32, align: 32, elements: !37)
!37 = !{!38, !39, !40, !41, !42, !43, !44}
!38 = !DIEnumerator(name: "Boolean", value: 1, isUnsigned: true)
!39 = !DIEnumerator(name: "Integer", value: 2, isUnsigned: true)
!40 = !DIEnumerator(name: "Float", value: 4, isUnsigned: true)
!41 = !DIEnumerator(name: "String", value: 8, isUnsigned: true)
!42 = !DIEnumerator(name: "Untyped", value: 32, isUnsigned: true)
!43 = !DIEnumerator(name: "Unsigned", value: 64, isUnsigned: true)
!44 = !DIEnumerator(name: "TypeID", value: 128, isUnsigned: true)
!45 = !DICompositeType(tag: DW_TAG_enumeration_type, name: "init.StructFlag", scope: !1, file: !1, size: 32, align: 32, elements: !46)
!46 = !{!47, !48, !49}
!47 = !DIEnumerator(name: "Packed", value: 1, isUnsigned: true)
!48 = !DIEnumerator(name: "Generic", value: 2, isUnsigned: true)
!49 = !DIEnumerator(name: "Union", value: 4, isUnsigned: true)
!50 = !DICompositeType(tag: DW_TAG_enumeration_type, name: "init.VectorKind", scope: !1, file: !1, size: 64, align: 64, elements: !51)
!51 = !{!52, !53}
!52 = !DIEnumerator(name: "Float", value: 0, isUnsigned: true)
!53 = !DIEnumerator(name: "Int", value: 1, isUnsigned: true)
!54 = !DICompositeType(tag: DW_TAG_enumeration_type, name: "compile.CompileFlag", scope: !1, file: !1, size: 32, align: 32, elements: !55)
!55 = !{!56, !57, !58, !59, !60, !61, !62, !63, !64}
!56 = !DIEnumerator(name: "Debug", value: 1, isUnsigned: true)
!57 = !DIEnumerator(name: "SanAddress", value: 2, isUnsigned: true)
!58 = !DIEnumerator(name: "SanMemory", value: 4, isUnsigned: true)
!59 = !DIEnumerator(name: "SanThread", value: 8, isUnsigned: true)
!60 = !DIEnumerator(name: "SanUndefined", value: 16, isUnsigned: true)
!61 = !DIEnumerator(name: "NoStdLib", value: 32, isUnsigned: true)
!62 = !DIEnumerator(name: "SharedLib", value: 64, isUnsigned: true)
!63 = !DIEnumerator(name: "CrossAndroid", value: 128, isUnsigned: true)
!64 = !DIEnumerator(name: "NoLink", value: 256, isUnsigned: true)
!65 = !DICompositeType(tag: DW_TAG_enumeration_type, name: "compile.Arch", scope: !1, file: !1, size: 32, align: 32, elements: !66)
!66 = !{!67, !68, !69, !70}
!67 = !DIEnumerator(name: "x86_64", value: 0, isUnsigned: true)
!68 = !DIEnumerator(name: "x86", value: 1, isUnsigned: true)
!69 = !DIEnumerator(name: "Arm32", value: 2, isUnsigned: true)
!70 = !DIEnumerator(name: "Arm64", value: 4, isUnsigned: true)
!71 = !DICompositeType(tag: DW_TAG_enumeration_type, name: "main.Tile", scope: !1, file: !1, size: 64, align: 64, elements: !72)
!72 = !{!73, !74, !75, !76}
!73 = !DIEnumerator(name: "Wall", value: 0, isUnsigned: true)
!74 = !DIEnumerator(name: "Empty", value: 1, isUnsigned: true)
!75 = !DIEnumerator(name: "Start", value: 2, isUnsigned: true)
!76 = !DIEnumerator(name: "End", value: 3, isUnsigned: true)
!77 = !{i32 2, !"CodeView", i32 1}
!78 = !{i32 2, !"Debug Info Version", i32 3}
!79 = distinct !DISubprogram(name: "to_int", linkageName: "str.to_int", scope: !1, file: !1, line: 10, type: !80, spFlags: DISPFlagDefinition, unit: !0, retainedNodes: !89)
!80 = !DISubroutineType(types: !81)
!81 = !{!82, !83}
!82 = !DIBasicType(name: "int", size: 64, encoding: DW_ATE_signed)
!83 = !DICompositeType(tag: DW_TAG_structure_type, name: "string", scope: !1, file: !1, size: 128, elements: !84)
!84 = !{!85, !88}
!85 = !DIDerivedType(tag: DW_TAG_member, name: "data", scope: !1, file: !1, baseType: !86, size: 64, align: 64)
!86 = !DIDerivedType(tag: DW_TAG_pointer_type, name: "*u8", baseType: !87, size: 64, align: 64, dwarfAddressSpace: 0)
!87 = !DIBasicType(name: "u8", size: 8, encoding: DW_ATE_unsigned)
!88 = !DIDerivedType(tag: DW_TAG_member, name: "count", scope: !1, file: !1, baseType: !82, size: 64, align: 64, offset: 64)
!89 = !{}
!90 = !DILocation(line: 10, scope: !79)
!91 = !DILocalVariable(name: "str", scope: !79, file: !1, line: 10, type: !83)
!92 = !DILocation(line: 11, scope: !79)
!93 = !DILocalVariable(name: "neg", scope: !79, file: !1, line: 11, type: !94)
!94 = !DIBasicType(name: "bool", size: 8, encoding: DW_ATE_boolean)
!95 = !DILocation(line: 12, scope: !79)
!96 = !DILocalVariable(name: "res", scope: !79, file: !1, line: 12, type: !82)
!97 = !DILocation(line: 13, scope: !79)
!98 = !DILocalVariable(name: "c", scope: !79, file: !1, line: 13, type: !99)
!99 = !DIBasicType(name: "u32", size: 32, encoding: DW_ATE_unsigned)
!100 = !DILocalVariable(name: "i", scope: !79, file: !1, line: 13, type: !82)
!101 = !DILocation(line: 14, scope: !79)
!102 = !DILocation(line: 15, scope: !79)
!103 = !DILocation(line: 16, scope: !79)
!104 = !DILocation(line: 17, scope: !79)
!105 = !DILocation(line: 20, scope: !79)
!106 = !DILocation(line: 22, scope: !79)
!107 = !DILocalVariable(name: "val", scope: !79, file: !1, line: 22, type: !82)
!108 = !DILocation(line: 34, scope: !79)
!109 = !DILocation(line: 37, scope: !79)
!110 = !DILocation(line: 38, scope: !79)
!111 = distinct !DISubprogram(name: "create", linkageName: "str.create", scope: !1, file: !1, line: 41, type: !112, spFlags: DISPFlagDefinition, unit: !0, retainedNodes: !89)
!112 = !DISubroutineType(types: !113)
!113 = !{!114, !122}
!114 = !DICompositeType(tag: DW_TAG_structure_type, name: "str.Builder", scope: !1, file: !1, size: 128, elements: !115)
!115 = !{!116}
!116 = !DIDerivedType(tag: DW_TAG_member, name: "data", scope: !1, file: !1, baseType: !117, size: 128, align: 64)
!117 = !DICompositeType(tag: DW_TAG_structure_type, scope: !1, file: !1, size: 128, align: 64, elements: !118)
!118 = !{!119, !120}
!119 = !DIDerivedType(tag: DW_TAG_member, name: "count", scope: !1, file: !1, baseType: !82, size: 64, align: 64)
!120 = !DIDerivedType(tag: DW_TAG_member, name: "data", scope: !1, file: !1, baseType: !121, size: 64, align: 64, offset: 64)
!121 = !DIDerivedType(tag: DW_TAG_pointer_type, name: "*u32", baseType: !99, size: 64, align: 64, dwarfAddressSpace: 0)
!122 = !DIDerivedType(tag: DW_TAG_pointer_type, name: "*mem.Allocator", baseType: !123, size: 64, align: 64, dwarfAddressSpace: 0)
!123 = !DICompositeType(tag: DW_TAG_structure_type, name: "mem.Allocator", scope: !1, file: !1, size: 192, align: 64, flags: DIFlagFwdDecl)
!124 = !DILocation(line: 41, scope: !111)
!125 = !DILocalVariable(name: "alloc", scope: !111, file: !1, line: 41, type: !122)
!126 = !DILocation(line: 42, scope: !111)
!127 = distinct !DISubprogram(name: "append", linkageName: "str.append", scope: !1, file: !1, line: 47, type: !128, spFlags: DISPFlagDefinition, unit: !0, retainedNodes: !89)
!128 = !DISubroutineType(types: !129)
!129 = !{null, !130, !83}
!130 = !DIDerivedType(tag: DW_TAG_pointer_type, name: "*str.Builder", baseType: !114, size: 64, align: 64, dwarfAddressSpace: 0)
!131 = !DILocation(line: 47, scope: !127)
!132 = !DILocalVariable(name: "b", scope: !127, file: !1, line: 47, type: !130)
!133 = !DILocalVariable(name: "str", arg: 1, scope: !127, file: !1, line: 47, type: !83)
!134 = !DILocation(line: 48, scope: !127)
!135 = !DILocalVariable(name: "b", scope: !127, file: !1, line: 48, type: !130)
!136 = !DILocation(line: 49, scope: !127)
!137 = !DILocalVariable(name: "c", scope: !127, file: !1, line: 49, type: !99)
!138 = !DILocalVariable(name: "i", scope: !127, file: !1, line: 49, type: !82)
!139 = !DILocation(line: 50, scope: !127)
!140 = !DILocation(line: 52, scope: !127)
!141 = distinct !DISubprogram(name: "append_u32", linkageName: "str.append_u32", scope: !1, file: !1, line: 54, type: !142, spFlags: DISPFlagDefinition, unit: !0, retainedNodes: !89)
!142 = !DISubroutineType(types: !143)
!143 = !{null, !130, !99}
!144 = !DILocation(line: 54, scope: !141)
!145 = !DILocalVariable(name: "b", scope: !141, file: !1, line: 54, type: !130)
!146 = !DILocalVariable(name: "c", arg: 1, scope: !141, file: !1, line: 54, type: !99)
!147 = !DILocation(line: 55, scope: !141)
!148 = !DILocalVariable(name: "b", scope: !141, file: !1, line: 55, type: !130)
!149 = !DILocation(line: 56, scope: !141)
!150 = !DILocation(line: 57, scope: !141)
!151 = distinct !DISubprogram(name: "append_u8", linkageName: "str.append_u8", scope: !1, file: !1, line: 59, type: !152, spFlags: DISPFlagDefinition, unit: !0, retainedNodes: !89)
!152 = !DISubroutineType(types: !153)
!153 = !{null, !130, !87}
!154 = !DILocation(line: 59, scope: !151)
!155 = !DILocalVariable(name: "b", scope: !151, file: !1, line: 59, type: !130)
!156 = !DILocalVariable(name: "c", arg: 1, scope: !151, file: !1, line: 59, type: !87)
!157 = !DILocation(line: 60, scope: !151)
!158 = !DILocalVariable(name: "b", scope: !151, file: !1, line: 60, type: !130)
!159 = !DILocation(line: 61, scope: !151)
!160 = !DILocation(line: 62, scope: !151)
!161 = distinct !DISubprogram(name: "from_builder", linkageName: "str.from_builder", scope: !1, file: !1, line: 64, type: !162, spFlags: DISPFlagDefinition, unit: !0, retainedNodes: !89)
!162 = !DISubroutineType(types: !163)
!163 = !{!83, !130, !122}
!164 = !DILocation(line: 64, scope: !161)
!165 = !DILocalVariable(name: "b", scope: !161, file: !1, line: 64, type: !130)
!166 = !DILocalVariable(name: "alloc", arg: 1, scope: !161, file: !1, line: 64, type: !122)
!167 = !DILocation(line: 65, scope: !161)
!168 = !DILocalVariable(name: "data", scope: !161, file: !1, line: 65, type: !169)
!169 = !DICompositeType(tag: DW_TAG_structure_type, scope: !1, file: !1, size: 128, align: 64, elements: !170)
!170 = !{!119, !171}
!171 = !DIDerivedType(tag: DW_TAG_member, name: "data", scope: !1, file: !1, baseType: !86, size: 64, align: 64, offset: 64)
!172 = !DILocation(line: 66, scope: !161)
!173 = !DILocalVariable(name: "len", scope: !161, file: !1, line: 66, type: !82)
!174 = !DILocation(line: 67, scope: !161)
!175 = !DILocalVariable(name: "as_u8", scope: !161, file: !1, line: 67, type: !86)
!176 = !DILocation(line: 68, scope: !161)
!177 = !DILocalVariable(name: "i", scope: !161, file: !1, line: 68, type: !82)
!178 = !DILocation(line: 69, scope: !161)
!179 = !DILocation(line: 71, scope: !161)
!180 = !DILocation(line: 72, scope: !161)
!181 = !DILocation(line: 75, scope: !161)
!182 = distinct !DISubprogram(name: "substr", linkageName: "str.substr", scope: !1, file: !1, line: 80, type: !183, spFlags: DISPFlagDefinition, unit: !0, retainedNodes: !89)
!183 = !DISubroutineType(types: !184)
!184 = !{!83, !83, !82, !82}
!185 = !DILocation(line: 80, scope: !182)
!186 = !DILocalVariable(name: "original", scope: !182, file: !1, line: 80, type: !83)
!187 = !DILocalVariable(name: "from", arg: 1, scope: !182, file: !1, line: 80, type: !82)
!188 = !DILocalVariable(name: "to_excl", arg: 2, scope: !182, file: !1, line: 80, type: !82)
!189 = !DILocation(line: 81, scope: !182)
!190 = !DILocalVariable(name: "o", scope: !182, file: !1, line: 81, type: !83)
!191 = !DILocation(line: 82, scope: !182)
!192 = !DILocalVariable(name: "r", scope: !182, file: !1, line: 82, type: !83)
!193 = !DILocation(line: 83, scope: !182)
!194 = !DILocation(line: 84, scope: !182)
!195 = !DILocation(line: 85, scope: !182)
!196 = distinct !DISubprogram(name: "get_codepoint_size", linkageName: "str.get_codepoint_size", scope: !1, file: !1, line: 88, type: !197, spFlags: DISPFlagDefinition, unit: !0, retainedNodes: !89)
!197 = !DISubroutineType(types: !198)
!198 = !{!82, !86}
!199 = !DILocation(line: 88, scope: !196)
!200 = !DILocalVariable(name: "codepoint", scope: !196, file: !1, line: 88, type: !86)
!201 = !DILocation(line: 89, scope: !196)
!202 = !DILocalVariable(name: "p", scope: !196, file: !1, line: 89, type: !86)
!203 = !DILocation(line: 90, scope: !196)
!204 = !DILocation(line: 91, scope: !196)
!205 = !DILocation(line: 94, scope: !196)
!206 = !DILocalVariable(name: "size", scope: !196, file: !1, line: 94, type: !82)
!207 = !DILocation(line: 95, scope: !196)
!208 = !DILocalVariable(name: "i", scope: !196, file: !1, line: 95, type: !82)
!209 = !DILocation(line: 96, scope: !196)
!210 = !DILocation(line: 98, scope: !196)
!211 = distinct !DISubprogram(name: "advance", linkageName: "str.advance", scope: !1, file: !1, line: 101, type: !212, spFlags: DISPFlagDefinition, unit: !0, retainedNodes: !89)
!212 = !DISubroutineType(types: !213)
!213 = !{!86, !86}
!214 = !DILocation(line: 101, scope: !211)
!215 = !DILocalVariable(name: "pos", scope: !211, file: !1, line: 101, type: !86)
!216 = !DILocation(line: 102, scope: !211)
!217 = !DILocalVariable(name: "size", scope: !211, file: !1, line: 102, type: !82)
!218 = !DILocation(line: 103, scope: !211)
!219 = !DILocalVariable(name: "p", scope: !211, file: !1, line: 103, type: !86)
!220 = !DILocation(line: 104, scope: !211)
!221 = distinct !DISubprogram(name: "_it_advance", linkageName: "str._it_advance", scope: !1, file: !1, line: 107, type: !222, spFlags: DISPFlagDefinition, unit: !0, retainedNodes: !89)
!222 = !DISubroutineType(types: !223)
!223 = !{!224, !86, !82, !82}
!224 = !DIDerivedType(tag: DW_TAG_pointer_type, name: "?*u8", baseType: !87, size: 64, align: 64, dwarfAddressSpace: 0)
!225 = !DILocation(line: 107, scope: !221)
!226 = !DILocalVariable(name: "pos", scope: !221, file: !1, line: 107, type: !86)
!227 = !DILocalVariable(name: "count", arg: 1, scope: !221, file: !1, line: 107, type: !82)
!228 = !DILocalVariable(name: "at", arg: 2, scope: !221, file: !1, line: 107, type: !82)
!229 = !DILocation(line: 108, scope: !221)
!230 = !DILocation(line: 109, scope: !221)
!231 = !DILocation(line: 111, scope: !221)
!232 = distinct !DISubprogram(name: "deref", linkageName: "str.deref", scope: !1, file: !1, line: 114, type: !233, spFlags: DISPFlagDefinition, unit: !0, retainedNodes: !89)
!233 = !DISubroutineType(types: !234)
!234 = !{!99, !86}
!235 = !DILocation(line: 114, scope: !232)
!236 = !DILocalVariable(name: "pos", scope: !232, file: !1, line: 114, type: !86)
!237 = !DILocation(line: 115, scope: !232)
!238 = !DILocalVariable(name: "p", scope: !232, file: !1, line: 115, type: !86)
!239 = !DILocation(line: 116, scope: !232)
!240 = !DILocalVariable(name: "size", scope: !232, file: !1, line: 116, type: !82)
!241 = !DILocation(line: 117, scope: !232)
!242 = !DILocalVariable(name: "res", scope: !232, file: !1, line: 117, type: !99)
!243 = !DILocation(line: 118, scope: !232)
!244 = !DILocalVariable(name: "i", scope: !232, file: !1, line: 118, type: !82)
!245 = !DILocation(line: 119, scope: !232)
!246 = !DILocation(line: 120, scope: !232)
!247 = !DILocation(line: 123, scope: !232)
!248 = distinct !DISubprogram(name: "index", linkageName: "str.index", scope: !1, file: !1, line: 126, type: !249, spFlags: DISPFlagDefinition, unit: !0, retainedNodes: !89)
!249 = !DISubroutineType(types: !250)
!250 = !{!99, !83, !82}
!251 = !DILocation(line: 126, scope: !248)
!252 = !DILocalVariable(name: "s", scope: !248, file: !1, line: 126, type: !83)
!253 = !DILocalVariable(name: "idx", arg: 1, scope: !248, file: !1, line: 126, type: !82)
!254 = !DILocation(line: 127, scope: !248)
!255 = !DILocation(line: 128, scope: !248)
!256 = !DILocation(line: 131, scope: !248)
!257 = !DILocalVariable(name: "p", scope: !248, file: !1, line: 131, type: !86)
!258 = !DILocation(line: 132, scope: !248)
!259 = !DILocalVariable(name: "i", scope: !248, file: !1, line: 132, type: !82)
!260 = !DILocation(line: 133, scope: !248)
!261 = !DILocation(line: 135, scope: !248)
